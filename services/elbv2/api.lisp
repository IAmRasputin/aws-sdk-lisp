;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/elbv2/api
  (:use)
  (:nicknames #:aws/elbv2)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/elbv2/api)
(common-lisp:progn
 (common-lisp:defclass elbv2-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "elbv2" :protocol :query))
 (common-lisp:export 'elbv2-request))
(common-lisp:progn
 (common-lisp:define-condition elbv2-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'elbv2-error))
(common-lisp:defvar *error-map*
  '(("ALPNPolicyNotSupportedException" . alpnpolicy-not-supported-exception)
    ("AllocationIdNotFoundException" . allocation-id-not-found-exception)
    ("AvailabilityZoneNotSupportedException"
     . availability-zone-not-supported-exception)
    ("CertificateNotFoundException" . certificate-not-found-exception)
    ("DuplicateListenerException" . duplicate-listener-exception)
    ("DuplicateLoadBalancerNameException"
     . duplicate-load-balancer-name-exception)
    ("DuplicateTagKeysException" . duplicate-tag-keys-exception)
    ("DuplicateTargetGroupNameException"
     . duplicate-target-group-name-exception)
    ("HealthUnavailableException" . health-unavailable-exception)
    ("IncompatibleProtocolsException" . incompatible-protocols-exception)
    ("InvalidConfigurationRequestException"
     . invalid-configuration-request-exception)
    ("InvalidLoadBalancerActionException"
     . invalid-load-balancer-action-exception)
    ("InvalidSchemeException" . invalid-scheme-exception)
    ("InvalidSecurityGroupException" . invalid-security-group-exception)
    ("InvalidSubnetException" . invalid-subnet-exception)
    ("InvalidTargetException" . invalid-target-exception)
    ("ListenerNotFoundException" . listener-not-found-exception)
    ("LoadBalancerNotFoundException" . load-balancer-not-found-exception)
    ("OperationNotPermittedException" . operation-not-permitted-exception)
    ("PriorityInUseException" . priority-in-use-exception)
    ("ResourceInUseException" . resource-in-use-exception)
    ("RuleNotFoundException" . rule-not-found-exception)
    ("SSLPolicyNotFoundException" . sslpolicy-not-found-exception)
    ("SubnetNotFoundException" . subnet-not-found-exception)
    ("TargetGroupAssociationLimitException"
     . target-group-association-limit-exception)
    ("TargetGroupNotFoundException" . target-group-not-found-exception)
    ("TooManyActionsException" . too-many-actions-exception)
    ("TooManyCertificatesException" . too-many-certificates-exception)
    ("TooManyListenersException" . too-many-listeners-exception)
    ("TooManyLoadBalancersException" . too-many-load-balancers-exception)
    ("TooManyRegistrationsForTargetIdException"
     . too-many-registrations-for-target-id-exception)
    ("TooManyRulesException" . too-many-rules-exception)
    ("TooManyTagsException" . too-many-tags-exception)
    ("TooManyTargetGroupsException" . too-many-target-groups-exception)
    ("TooManyTargetsException" . too-many-targets-exception)
    ("TooManyUniqueTargetGroupsPerLoadBalancerException"
     . too-many-unique-target-groups-per-load-balancer-exception)
    ("UnsupportedProtocolException" . unsupported-protocol-exception)))
(common-lisp:progn
 (common-lisp:define-condition alpnpolicy-not-supported-exception
     (elbv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'alpnpolicy-not-supported-exception)))
(common-lisp:progn
 (common-lisp:defclass action common-lisp:nil
                       ((forward-config :initarg :forward-config :type
                         (common-lisp:or forward-action-config
                                         common-lisp:null)
                         :accessor %action-forward-config :initform
                         common-lisp:nil)
                        (fixed-response-config :initarg :fixed-response-config
                         :type
                         (common-lisp:or fixed-response-action-config
                                         common-lisp:null)
                         :accessor %action-fixed-response-config :initform
                         common-lisp:nil)
                        (redirect-config :initarg :redirect-config :type
                         (common-lisp:or redirect-action-config
                                         common-lisp:null)
                         :accessor %action-redirect-config :initform
                         common-lisp:nil)
                        (order :initarg :order :type
                         (common-lisp:or action-order common-lisp:null)
                         :accessor %action-order :initform common-lisp:nil)
                        (authenticate-cognito-config :initarg
                         :authenticate-cognito-config :type
                         (common-lisp:or authenticate-cognito-action-config
                                         common-lisp:null)
                         :accessor %action-authenticate-cognito-config
                         :initform common-lisp:nil)
                        (authenticate-oidc-config :initarg
                         :authenticate-oidc-config :type
                         (common-lisp:or authenticate-oidc-action-config
                                         common-lisp:null)
                         :accessor %action-authenticate-oidc-config :initform
                         common-lisp:nil)
                        (target-group-arn :initarg :target-group-arn :type
                         (common-lisp:or target-group-arn common-lisp:null)
                         :accessor %action-target-group-arn :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or action-type-enum common-lisp:null)
                         :accessor %action-type :initform
                         (common-lisp:error ":type is required"))))
 (common-lisp:export (common-lisp:list 'action 'make-action))
 (common-lisp:defun make-action
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key forward-config fixed-response-config
                     redirect-config order authenticate-cognito-config
                     authenticate-oidc-config target-group-arn type)
   (common-lisp:apply #'common-lisp:make-instance 'action
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-arn))
      (common-lisp:list
       (common-lisp:cons "TargetGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authenticate-oidc-config))
      (common-lisp:list
       (common-lisp:cons "AuthenticateOidcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authenticate-cognito-config))
      (common-lisp:list
       (common-lisp:cons "AuthenticateCognitoConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "Order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redirect-config))
      (common-lisp:list
       (common-lisp:cons "RedirectConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fixed-response-config))
      (common-lisp:list
       (common-lisp:cons "FixedResponseConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forward-config))
      (common-lisp:list
       (common-lisp:cons "ForwardConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action))
   common-lisp:nil))
(common-lisp:deftype action-order () 'common-lisp:integer)
(common-lisp:deftype action-type-enum () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype actions () '(trivial-types:proper-list action))
 (common-lisp:defun |make-actions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass add-listener-certificates-input common-lisp:nil
                       ((certificates :initarg :certificates :type
                         (common-lisp:or certificate-list common-lisp:null)
                         :accessor
                         %add-listener-certificates-input-certificates
                         :initform
                         (common-lisp:error ":certificates is required"))
                        (listener-arn :initarg :listener-arn :type
                         (common-lisp:or listener-arn common-lisp:null)
                         :accessor
                         %add-listener-certificates-input-listener-arn
                         :initform
                         (common-lisp:error ":listener-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'add-listener-certificates-input
                    'make-add-listener-certificates-input))
 (common-lisp:defun make-add-listener-certificates-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key certificates listener-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-listener-certificates-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-listener-certificates-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-listener-certificates-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-arn))
      (common-lisp:list
       (common-lisp:cons "ListenerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificates))
      (common-lisp:list
       (common-lisp:cons "Certificates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-listener-certificates-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-listener-certificates-output common-lisp:nil
                       ((certificates :initarg :certificates :type
                         (common-lisp:or certificate-list common-lisp:null)
                         :accessor
                         %add-listener-certificates-output-certificates
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'add-listener-certificates-output
                    'make-add-listener-certificates-output))
 (common-lisp:defun make-add-listener-certificates-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key certificates)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-listener-certificates-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-listener-certificates-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-listener-certificates-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificates))
      (common-lisp:list
       (common-lisp:cons "Certificates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-listener-certificates-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-tags-input common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %add-tags-input-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arns :initarg :resource-arns :type
                         (common-lisp:or resource-arns common-lisp:null)
                         :accessor %add-tags-input-resource-arns :initform
                         (common-lisp:error ":resource-arns is required"))))
 (common-lisp:export (common-lisp:list 'add-tags-input 'make-add-tags-input))
 (common-lisp:defun make-add-tags-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arns)
   (common-lisp:apply #'common-lisp:make-instance 'add-tags-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input add-tags-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input add-tags-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arns))
      (common-lisp:list
       (common-lisp:cons "ResourceArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input add-tags-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-tags-output common-lisp:nil common-lisp:nil)
 (common-lisp:export (common-lisp:list 'add-tags-output 'make-add-tags-output))
 (common-lisp:defun make-add-tags-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'add-tags-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input add-tags-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input add-tags-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input add-tags-output))
   common-lisp:nil))
(common-lisp:deftype allocation-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition allocation-id-not-found-exception
     (elbv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'allocation-id-not-found-exception)))
(common-lisp:progn
 (common-lisp:deftype alpn-policy-name ()
   '(trivial-types:proper-list alpn-policy-value))
 (common-lisp:defun |make-alpn-policy-name|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list alpn-policy-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype alpn-policy-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype authenticate-cognito-action-authentication-request-extra-params
                      ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-authenticate-cognito-action-authentication-request-extra-params|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype authenticate-cognito-action-authentication-request-param-name
                     ()
  'common-lisp:string)
(common-lisp:deftype authenticate-cognito-action-authentication-request-param-value
                     ()
  'common-lisp:string)
(common-lisp:deftype authenticate-cognito-action-conditional-behavior-enum ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass authenticate-cognito-action-config common-lisp:nil
                       ((on-unauthenticated-request :initarg
                         :on-unauthenticated-request :type
                         (common-lisp:or
                          authenticate-cognito-action-conditional-behavior-enum
                          common-lisp:null)
                         :accessor
                         %authenticate-cognito-action-config-on-unauthenticated-request
                         :initform common-lisp:nil)
                        (authentication-request-extra-params :initarg
                         :authentication-request-extra-params :type
                         (common-lisp:or
                          authenticate-cognito-action-authentication-request-extra-params
                          common-lisp:null)
                         :accessor
                         %authenticate-cognito-action-config-authentication-request-extra-params
                         :initform common-lisp:nil)
                        (session-timeout :initarg :session-timeout :type
                         (common-lisp:or
                          authenticate-cognito-action-session-timeout
                          common-lisp:null)
                         :accessor
                         %authenticate-cognito-action-config-session-timeout
                         :initform common-lisp:nil)
                        (scope :initarg :scope :type
                         (common-lisp:or authenticate-cognito-action-scope
                                         common-lisp:null)
                         :accessor %authenticate-cognito-action-config-scope
                         :initform common-lisp:nil)
                        (session-cookie-name :initarg :session-cookie-name
                         :type
                         (common-lisp:or
                          authenticate-cognito-action-session-cookie-name
                          common-lisp:null)
                         :accessor
                         %authenticate-cognito-action-config-session-cookie-name
                         :initform common-lisp:nil)
                        (user-pool-domain :initarg :user-pool-domain :type
                         (common-lisp:or
                          authenticate-cognito-action-user-pool-domain
                          common-lisp:null)
                         :accessor
                         %authenticate-cognito-action-config-user-pool-domain
                         :initform
                         (common-lisp:error ":user-pool-domain is required"))
                        (user-pool-client-id :initarg :user-pool-client-id
                         :type
                         (common-lisp:or
                          authenticate-cognito-action-user-pool-client-id
                          common-lisp:null)
                         :accessor
                         %authenticate-cognito-action-config-user-pool-client-id
                         :initform
                         (common-lisp:error
                          ":user-pool-client-id is required"))
                        (user-pool-arn :initarg :user-pool-arn :type
                         (common-lisp:or
                          authenticate-cognito-action-user-pool-arn
                          common-lisp:null)
                         :accessor
                         %authenticate-cognito-action-config-user-pool-arn
                         :initform
                         (common-lisp:error ":user-pool-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'authenticate-cognito-action-config
                    'make-authenticate-cognito-action-config))
 (common-lisp:defun make-authenticate-cognito-action-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key on-unauthenticated-request
                     authentication-request-extra-params session-timeout scope
                     session-cookie-name user-pool-domain user-pool-client-id
                     user-pool-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'authenticate-cognito-action-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          authenticate-cognito-action-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          authenticate-cognito-action-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-arn))
      (common-lisp:list
       (common-lisp:cons "UserPoolArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-client-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-domain))
      (common-lisp:list
       (common-lisp:cons "UserPoolDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-cookie-name))
      (common-lisp:list
       (common-lisp:cons "SessionCookieName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-timeout))
      (common-lisp:list
       (common-lisp:cons "SessionTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-request-extra-params))
      (common-lisp:list
       (common-lisp:cons "AuthenticationRequestExtraParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-unauthenticated-request))
      (common-lisp:list
       (common-lisp:cons "OnUnauthenticatedRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          authenticate-cognito-action-config))
   common-lisp:nil))
(common-lisp:deftype authenticate-cognito-action-scope () 'common-lisp:string)
(common-lisp:deftype authenticate-cognito-action-session-cookie-name ()
  'common-lisp:string)
(common-lisp:deftype authenticate-cognito-action-session-timeout ()
  'common-lisp:integer)
(common-lisp:deftype authenticate-cognito-action-user-pool-arn ()
  'common-lisp:string)
(common-lisp:deftype authenticate-cognito-action-user-pool-client-id ()
  'common-lisp:string)
(common-lisp:deftype authenticate-cognito-action-user-pool-domain ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype authenticate-oidc-action-authentication-request-extra-params
                      ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-authenticate-oidc-action-authentication-request-extra-params|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype authenticate-oidc-action-authentication-request-param-name
                     ()
  'common-lisp:string)
(common-lisp:deftype authenticate-oidc-action-authentication-request-param-value
                     ()
  'common-lisp:string)
(common-lisp:deftype authenticate-oidc-action-authorization-endpoint ()
  'common-lisp:string)
(common-lisp:deftype authenticate-oidc-action-client-id () 'common-lisp:string)
(common-lisp:deftype authenticate-oidc-action-client-secret ()
  'common-lisp:string)
(common-lisp:deftype authenticate-oidc-action-conditional-behavior-enum ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass authenticate-oidc-action-config common-lisp:nil
                       ((use-existing-client-secret :initarg
                         :use-existing-client-secret :type
                         (common-lisp:or
                          authenticate-oidc-action-use-existing-client-secret
                          common-lisp:null)
                         :accessor
                         %authenticate-oidc-action-config-use-existing-client-secret
                         :initform common-lisp:nil)
                        (on-unauthenticated-request :initarg
                         :on-unauthenticated-request :type
                         (common-lisp:or
                          authenticate-oidc-action-conditional-behavior-enum
                          common-lisp:null)
                         :accessor
                         %authenticate-oidc-action-config-on-unauthenticated-request
                         :initform common-lisp:nil)
                        (authentication-request-extra-params :initarg
                         :authentication-request-extra-params :type
                         (common-lisp:or
                          authenticate-oidc-action-authentication-request-extra-params
                          common-lisp:null)
                         :accessor
                         %authenticate-oidc-action-config-authentication-request-extra-params
                         :initform common-lisp:nil)
                        (session-timeout :initarg :session-timeout :type
                         (common-lisp:or
                          authenticate-oidc-action-session-timeout
                          common-lisp:null)
                         :accessor
                         %authenticate-oidc-action-config-session-timeout
                         :initform common-lisp:nil)
                        (scope :initarg :scope :type
                         (common-lisp:or authenticate-oidc-action-scope
                                         common-lisp:null)
                         :accessor %authenticate-oidc-action-config-scope
                         :initform common-lisp:nil)
                        (session-cookie-name :initarg :session-cookie-name
                         :type
                         (common-lisp:or
                          authenticate-oidc-action-session-cookie-name
                          common-lisp:null)
                         :accessor
                         %authenticate-oidc-action-config-session-cookie-name
                         :initform common-lisp:nil)
                        (client-secret :initarg :client-secret :type
                         (common-lisp:or authenticate-oidc-action-client-secret
                                         common-lisp:null)
                         :accessor
                         %authenticate-oidc-action-config-client-secret
                         :initform common-lisp:nil)
                        (client-id :initarg :client-id :type
                         (common-lisp:or authenticate-oidc-action-client-id
                                         common-lisp:null)
                         :accessor %authenticate-oidc-action-config-client-id
                         :initform
                         (common-lisp:error ":client-id is required"))
                        (user-info-endpoint :initarg :user-info-endpoint :type
                         (common-lisp:or
                          authenticate-oidc-action-user-info-endpoint
                          common-lisp:null)
                         :accessor
                         %authenticate-oidc-action-config-user-info-endpoint
                         :initform
                         (common-lisp:error ":user-info-endpoint is required"))
                        (token-endpoint :initarg :token-endpoint :type
                         (common-lisp:or
                          authenticate-oidc-action-token-endpoint
                          common-lisp:null)
                         :accessor
                         %authenticate-oidc-action-config-token-endpoint
                         :initform
                         (common-lisp:error ":token-endpoint is required"))
                        (authorization-endpoint :initarg
                         :authorization-endpoint :type
                         (common-lisp:or
                          authenticate-oidc-action-authorization-endpoint
                          common-lisp:null)
                         :accessor
                         %authenticate-oidc-action-config-authorization-endpoint
                         :initform
                         (common-lisp:error
                          ":authorization-endpoint is required"))
                        (issuer :initarg :issuer :type
                         (common-lisp:or authenticate-oidc-action-issuer
                                         common-lisp:null)
                         :accessor %authenticate-oidc-action-config-issuer
                         :initform (common-lisp:error ":issuer is required"))))
 (common-lisp:export
  (common-lisp:list 'authenticate-oidc-action-config
                    'make-authenticate-oidc-action-config))
 (common-lisp:defun make-authenticate-oidc-action-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key use-existing-client-secret
                     on-unauthenticated-request
                     authentication-request-extra-params session-timeout scope
                     session-cookie-name client-secret client-id
                     user-info-endpoint token-endpoint authorization-endpoint
                     issuer)
   (common-lisp:apply #'common-lisp:make-instance
                      'authenticate-oidc-action-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          authenticate-oidc-action-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          authenticate-oidc-action-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issuer))
      (common-lisp:list
       (common-lisp:cons "Issuer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorization-endpoint))
      (common-lisp:list
       (common-lisp:cons "AuthorizationEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-endpoint))
      (common-lisp:list
       (common-lisp:cons "TokenEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-info-endpoint))
      (common-lisp:list
       (common-lisp:cons "UserInfoEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "ClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-secret))
      (common-lisp:list
       (common-lisp:cons "ClientSecret"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-cookie-name))
      (common-lisp:list
       (common-lisp:cons "SessionCookieName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-timeout))
      (common-lisp:list
       (common-lisp:cons "SessionTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-request-extra-params))
      (common-lisp:list
       (common-lisp:cons "AuthenticationRequestExtraParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-unauthenticated-request))
      (common-lisp:list
       (common-lisp:cons "OnUnauthenticatedRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-existing-client-secret))
      (common-lisp:list
       (common-lisp:cons "UseExistingClientSecret"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          authenticate-oidc-action-config))
   common-lisp:nil))
(common-lisp:deftype authenticate-oidc-action-issuer () 'common-lisp:string)
(common-lisp:deftype authenticate-oidc-action-scope () 'common-lisp:string)
(common-lisp:deftype authenticate-oidc-action-session-cookie-name ()
  'common-lisp:string)
(common-lisp:deftype authenticate-oidc-action-session-timeout ()
  'common-lisp:integer)
(common-lisp:deftype authenticate-oidc-action-token-endpoint ()
  'common-lisp:string)
(common-lisp:deftype authenticate-oidc-action-use-existing-client-secret ()
  'common-lisp:boolean)
(common-lisp:deftype authenticate-oidc-action-user-info-endpoint ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass availability-zone common-lisp:nil
                       ((load-balancer-addresses :initarg
                         :load-balancer-addresses :type
                         (common-lisp:or load-balancer-addresses
                                         common-lisp:null)
                         :accessor %availability-zone-load-balancer-addresses
                         :initform common-lisp:nil)
                        (outpost-id :initarg :outpost-id :type
                         (common-lisp:or outpost-id common-lisp:null) :accessor
                         %availability-zone-outpost-id :initform
                         common-lisp:nil)
                        (subnet-id :initarg :subnet-id :type
                         (common-lisp:or subnet-id common-lisp:null) :accessor
                         %availability-zone-subnet-id :initform
                         common-lisp:nil)
                        (zone-name :initarg :zone-name :type
                         (common-lisp:or zone-name common-lisp:null) :accessor
                         %availability-zone-zone-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'availability-zone 'make-availability-zone))
 (common-lisp:defun make-availability-zone
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key load-balancer-addresses outpost-id
                     subnet-id zone-name)
   (common-lisp:apply #'common-lisp:make-instance 'availability-zone
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input availability-zone))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input availability-zone))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zone-name))
      (common-lisp:list
       (common-lisp:cons "ZoneName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outpost-id))
      (common-lisp:list
       (common-lisp:cons "OutpostId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'load-balancer-addresses))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input availability-zone))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition availability-zone-not-supported-exception
     (elbv2-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'availability-zone-not-supported-exception)))
(common-lisp:progn
 (common-lisp:deftype availability-zones ()
   '(trivial-types:proper-list availability-zone))
 (common-lisp:defun |make-availability-zones|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list availability-zone))
   aws-sdk/generator/shape::members))
(common-lisp:deftype canonical-hosted-zone-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass certificate common-lisp:nil
                       ((is-default :initarg :is-default :type
                         (common-lisp:or default common-lisp:null) :accessor
                         %certificate-is-default :initform common-lisp:nil)
                        (certificate-arn :initarg :certificate-arn :type
                         (common-lisp:or certificate-arn common-lisp:null)
                         :accessor %certificate-certificate-arn :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'certificate 'make-certificate))
 (common-lisp:defun make-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key is-default certificate-arn)
   (common-lisp:apply #'common-lisp:make-instance 'certificate
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-default))
      (common-lisp:list
       (common-lisp:cons "IsDefault"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input certificate))
   common-lisp:nil))
(common-lisp:deftype certificate-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype certificate-list ()
   '(trivial-types:proper-list certificate))
 (common-lisp:defun |make-certificate-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list certificate))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition certificate-not-found-exception
     (elbv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'certificate-not-found-exception)))
(common-lisp:progn
 (common-lisp:defclass cipher common-lisp:nil
                       ((priority :initarg :priority :type
                         (common-lisp:or cipher-priority common-lisp:null)
                         :accessor %cipher-priority :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or cipher-name common-lisp:null)
                         :accessor %cipher-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'cipher 'make-cipher))
 (common-lisp:defun make-cipher
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key priority name)
   (common-lisp:apply #'common-lisp:make-instance 'cipher
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cipher))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cipher))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cipher))
   common-lisp:nil))
(common-lisp:deftype cipher-name () 'common-lisp:string)
(common-lisp:deftype cipher-priority () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype ciphers () '(trivial-types:proper-list cipher))
 (common-lisp:defun |make-ciphers|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cipher))
   aws-sdk/generator/shape::members))
(common-lisp:deftype condition-field-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-listener-input common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-listener-input-tags :initform common-lisp:nil)
                        (alpn-policy :initarg :alpn-policy :type
                         (common-lisp:or alpn-policy-name common-lisp:null)
                         :accessor %create-listener-input-alpn-policy :initform
                         common-lisp:nil)
                        (default-actions :initarg :default-actions :type
                         (common-lisp:or actions common-lisp:null) :accessor
                         %create-listener-input-default-actions :initform
                         (common-lisp:error ":default-actions is required"))
                        (certificates :initarg :certificates :type
                         (common-lisp:or certificate-list common-lisp:null)
                         :accessor %create-listener-input-certificates
                         :initform common-lisp:nil)
                        (ssl-policy :initarg :ssl-policy :type
                         (common-lisp:or ssl-policy-name common-lisp:null)
                         :accessor %create-listener-input-ssl-policy :initform
                         common-lisp:nil)
                        (port :initarg :port :type
                         (common-lisp:or port common-lisp:null) :accessor
                         %create-listener-input-port :initform common-lisp:nil)
                        (protocol :initarg :protocol :type
                         (common-lisp:or protocol-enum common-lisp:null)
                         :accessor %create-listener-input-protocol :initform
                         common-lisp:nil)
                        (load-balancer-arn :initarg :load-balancer-arn :type
                         (common-lisp:or load-balancer-arn common-lisp:null)
                         :accessor %create-listener-input-load-balancer-arn
                         :initform
                         (common-lisp:error
                          ":load-balancer-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'create-listener-input 'make-create-listener-input))
 (common-lisp:defun make-create-listener-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags alpn-policy default-actions
                     certificates ssl-policy port protocol load-balancer-arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-listener-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-listener-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-listener-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-arn))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssl-policy))
      (common-lisp:list
       (common-lisp:cons "SslPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificates))
      (common-lisp:list
       (common-lisp:cons "Certificates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-actions))
      (common-lisp:list
       (common-lisp:cons "DefaultActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alpn-policy))
      (common-lisp:list
       (common-lisp:cons "AlpnPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-listener-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-listener-output common-lisp:nil
                       ((listeners :initarg :listeners :type
                         (common-lisp:or listeners common-lisp:null) :accessor
                         %create-listener-output-listeners :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-listener-output 'make-create-listener-output))
 (common-lisp:defun make-create-listener-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key listeners)
   (common-lisp:apply #'common-lisp:make-instance 'create-listener-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-listener-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-listener-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listeners))
      (common-lisp:list
       (common-lisp:cons "Listeners"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-listener-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-load-balancer-input common-lisp:nil
                       ((customer-owned-ipv4pool :initarg
                         :customer-owned-ipv4pool :type
                         (common-lisp:or customer-owned-ipv4pool
                                         common-lisp:null)
                         :accessor
                         %create-load-balancer-input-customer-owned-ipv4pool
                         :initform common-lisp:nil)
                        (ip-address-type :initarg :ip-address-type :type
                         (common-lisp:or ip-address-type common-lisp:null)
                         :accessor %create-load-balancer-input-ip-address-type
                         :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or load-balancer-type-enum
                                         common-lisp:null)
                         :accessor %create-load-balancer-input-type :initform
                         common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-load-balancer-input-tags :initform
                         common-lisp:nil)
                        (scheme :initarg :scheme :type
                         (common-lisp:or load-balancer-scheme-enum
                                         common-lisp:null)
                         :accessor %create-load-balancer-input-scheme :initform
                         common-lisp:nil)
                        (security-groups :initarg :security-groups :type
                         (common-lisp:or security-groups common-lisp:null)
                         :accessor %create-load-balancer-input-security-groups
                         :initform common-lisp:nil)
                        (subnet-mappings :initarg :subnet-mappings :type
                         (common-lisp:or subnet-mappings common-lisp:null)
                         :accessor %create-load-balancer-input-subnet-mappings
                         :initform common-lisp:nil)
                        (subnets :initarg :subnets :type
                         (common-lisp:or subnets common-lisp:null) :accessor
                         %create-load-balancer-input-subnets :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or load-balancer-name common-lisp:null)
                         :accessor %create-load-balancer-input-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-load-balancer-input
                    'make-create-load-balancer-input))
 (common-lisp:defun make-create-load-balancer-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key customer-owned-ipv4pool ip-address-type
                     type tags scheme security-groups subnet-mappings subnets
                     name)
   (common-lisp:apply #'common-lisp:make-instance 'create-load-balancer-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-mappings))
      (common-lisp:list
       (common-lisp:cons "SubnetMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheme))
      (common-lisp:list
       (common-lisp:cons "Scheme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "IpAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-owned-ipv4pool))
      (common-lisp:list
       (common-lisp:cons "CustomerOwnedIpv4Pool"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-load-balancer-output common-lisp:nil
                       ((load-balancers :initarg :load-balancers :type
                         (common-lisp:or load-balancers common-lisp:null)
                         :accessor %create-load-balancer-output-load-balancers
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-load-balancer-output
                    'make-create-load-balancer-output))
 (common-lisp:defun make-create-load-balancer-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key load-balancers)
   (common-lisp:apply #'common-lisp:make-instance 'create-load-balancer-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancers))
      (common-lisp:list
       (common-lisp:cons "LoadBalancers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-rule-input common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-rule-input-tags :initform common-lisp:nil)
                        (actions :initarg :actions :type
                         (common-lisp:or actions common-lisp:null) :accessor
                         %create-rule-input-actions :initform
                         (common-lisp:error ":actions is required"))
                        (priority :initarg :priority :type
                         (common-lisp:or rule-priority common-lisp:null)
                         :accessor %create-rule-input-priority :initform
                         (common-lisp:error ":priority is required"))
                        (conditions :initarg :conditions :type
                         (common-lisp:or rule-condition-list common-lisp:null)
                         :accessor %create-rule-input-conditions :initform
                         (common-lisp:error ":conditions is required"))
                        (listener-arn :initarg :listener-arn :type
                         (common-lisp:or listener-arn common-lisp:null)
                         :accessor %create-rule-input-listener-arn :initform
                         (common-lisp:error ":listener-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'create-rule-input 'make-create-rule-input))
 (common-lisp:defun make-create-rule-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags actions priority conditions
                     listener-arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-rule-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-rule-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-rule-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-arn))
      (common-lisp:list
       (common-lisp:cons "ListenerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conditions))
      (common-lisp:list
       (common-lisp:cons "Conditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-rule-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-rule-output common-lisp:nil
                       ((rules :initarg :rules :type
                         (common-lisp:or rules common-lisp:null) :accessor
                         %create-rule-output-rules :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-rule-output 'make-create-rule-output))
 (common-lisp:defun make-create-rule-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rules)
   (common-lisp:apply #'common-lisp:make-instance 'create-rule-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-rule-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-rule-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-rule-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-target-group-input common-lisp:nil
                       ((ip-address-type :initarg :ip-address-type :type
                         (common-lisp:or target-group-ip-address-type-enum
                                         common-lisp:null)
                         :accessor %create-target-group-input-ip-address-type
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-target-group-input-tags :initform
                         common-lisp:nil)
                        (target-type :initarg :target-type :type
                         (common-lisp:or target-type-enum common-lisp:null)
                         :accessor %create-target-group-input-target-type
                         :initform common-lisp:nil)
                        (matcher :initarg :matcher :type
                         (common-lisp:or matcher common-lisp:null) :accessor
                         %create-target-group-input-matcher :initform
                         common-lisp:nil)
                        (unhealthy-threshold-count :initarg
                         :unhealthy-threshold-count :type
                         (common-lisp:or health-check-threshold-count
                                         common-lisp:null)
                         :accessor
                         %create-target-group-input-unhealthy-threshold-count
                         :initform common-lisp:nil)
                        (healthy-threshold-count :initarg
                         :healthy-threshold-count :type
                         (common-lisp:or health-check-threshold-count
                                         common-lisp:null)
                         :accessor
                         %create-target-group-input-healthy-threshold-count
                         :initform common-lisp:nil)
                        (health-check-timeout-seconds :initarg
                         :health-check-timeout-seconds :type
                         (common-lisp:or health-check-timeout-seconds
                                         common-lisp:null)
                         :accessor
                         %create-target-group-input-health-check-timeout-seconds
                         :initform common-lisp:nil)
                        (health-check-interval-seconds :initarg
                         :health-check-interval-seconds :type
                         (common-lisp:or health-check-interval-seconds
                                         common-lisp:null)
                         :accessor
                         %create-target-group-input-health-check-interval-seconds
                         :initform common-lisp:nil)
                        (health-check-path :initarg :health-check-path :type
                         (common-lisp:or path common-lisp:null) :accessor
                         %create-target-group-input-health-check-path :initform
                         common-lisp:nil)
                        (health-check-enabled :initarg :health-check-enabled
                         :type
                         (common-lisp:or health-check-enabled common-lisp:null)
                         :accessor
                         %create-target-group-input-health-check-enabled
                         :initform common-lisp:nil)
                        (health-check-port :initarg :health-check-port :type
                         (common-lisp:or health-check-port common-lisp:null)
                         :accessor %create-target-group-input-health-check-port
                         :initform common-lisp:nil)
                        (health-check-protocol :initarg :health-check-protocol
                         :type (common-lisp:or protocol-enum common-lisp:null)
                         :accessor
                         %create-target-group-input-health-check-protocol
                         :initform common-lisp:nil)
                        (vpc-id :initarg :vpc-id :type
                         (common-lisp:or vpc-id common-lisp:null) :accessor
                         %create-target-group-input-vpc-id :initform
                         common-lisp:nil)
                        (port :initarg :port :type
                         (common-lisp:or port common-lisp:null) :accessor
                         %create-target-group-input-port :initform
                         common-lisp:nil)
                        (protocol-version :initarg :protocol-version :type
                         (common-lisp:or protocol-version common-lisp:null)
                         :accessor %create-target-group-input-protocol-version
                         :initform common-lisp:nil)
                        (protocol :initarg :protocol :type
                         (common-lisp:or protocol-enum common-lisp:null)
                         :accessor %create-target-group-input-protocol
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or target-group-name common-lisp:null)
                         :accessor %create-target-group-input-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-target-group-input
                    'make-create-target-group-input))
 (common-lisp:defun make-create-target-group-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ip-address-type tags target-type matcher
                     unhealthy-threshold-count healthy-threshold-count
                     health-check-timeout-seconds health-check-interval-seconds
                     health-check-path health-check-enabled health-check-port
                     health-check-protocol vpc-id port protocol-version
                     protocol name)
   (common-lisp:apply #'common-lisp:make-instance 'create-target-group-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-target-group-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-target-group-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol-version))
      (common-lisp:list
       (common-lisp:cons "ProtocolVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-protocol))
      (common-lisp:list
       (common-lisp:cons "HealthCheckProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check-port))
      (common-lisp:list
       (common-lisp:cons "HealthCheckPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-enabled))
      (common-lisp:list
       (common-lisp:cons "HealthCheckEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check-path))
      (common-lisp:list
       (common-lisp:cons "HealthCheckPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-interval-seconds))
      (common-lisp:list
       (common-lisp:cons "HealthCheckIntervalSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-timeout-seconds))
      (common-lisp:list
       (common-lisp:cons "HealthCheckTimeoutSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'healthy-threshold-count))
      (common-lisp:list
       (common-lisp:cons "HealthyThresholdCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unhealthy-threshold-count))
      (common-lisp:list
       (common-lisp:cons "UnhealthyThresholdCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'matcher))
      (common-lisp:list
       (common-lisp:cons "Matcher"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-type))
      (common-lisp:list
       (common-lisp:cons "TargetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "IpAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-target-group-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-target-group-output common-lisp:nil
                       ((target-groups :initarg :target-groups :type
                         (common-lisp:or target-groups common-lisp:null)
                         :accessor %create-target-group-output-target-groups
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-target-group-output
                    'make-create-target-group-output))
 (common-lisp:defun make-create-target-group-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-groups)
   (common-lisp:apply #'common-lisp:make-instance 'create-target-group-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-target-group-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-target-group-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-groups))
      (common-lisp:list
       (common-lisp:cons "TargetGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-target-group-output))
   common-lisp:nil))
(common-lisp:deftype created-time () 'common-lisp:string)
(common-lisp:deftype customer-owned-ipv4pool () 'common-lisp:string)
(common-lisp:deftype dnsname () 'common-lisp:string)
(common-lisp:deftype default () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass delete-listener-input common-lisp:nil
                       ((listener-arn :initarg :listener-arn :type
                         (common-lisp:or listener-arn common-lisp:null)
                         :accessor %delete-listener-input-listener-arn
                         :initform
                         (common-lisp:error ":listener-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-listener-input 'make-delete-listener-input))
 (common-lisp:defun make-delete-listener-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key listener-arn)
   (common-lisp:apply #'common-lisp:make-instance 'delete-listener-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-listener-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-listener-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-arn))
      (common-lisp:list
       (common-lisp:cons "ListenerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-listener-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-listener-output common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-listener-output 'make-delete-listener-output))
 (common-lisp:defun make-delete-listener-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-listener-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-listener-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-listener-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-listener-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-load-balancer-input common-lisp:nil
                       ((load-balancer-arn :initarg :load-balancer-arn :type
                         (common-lisp:or load-balancer-arn common-lisp:null)
                         :accessor
                         %delete-load-balancer-input-load-balancer-arn
                         :initform
                         (common-lisp:error
                          ":load-balancer-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-load-balancer-input
                    'make-delete-load-balancer-input))
 (common-lisp:defun make-delete-load-balancer-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key load-balancer-arn)
   (common-lisp:apply #'common-lisp:make-instance 'delete-load-balancer-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-arn))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-load-balancer-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-load-balancer-output
                    'make-delete-load-balancer-output))
 (common-lisp:defun make-delete-load-balancer-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-load-balancer-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-rule-input common-lisp:nil
                       ((rule-arn :initarg :rule-arn :type
                         (common-lisp:or rule-arn common-lisp:null) :accessor
                         %delete-rule-input-rule-arn :initform
                         (common-lisp:error ":rule-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-rule-input 'make-delete-rule-input))
 (common-lisp:defun make-delete-rule-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rule-arn)
   (common-lisp:apply #'common-lisp:make-instance 'delete-rule-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-rule-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-rule-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-arn))
      (common-lisp:list
       (common-lisp:cons "RuleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-rule-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-rule-output common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-rule-output 'make-delete-rule-output))
 (common-lisp:defun make-delete-rule-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-rule-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-rule-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-rule-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-rule-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-target-group-input common-lisp:nil
                       ((target-group-arn :initarg :target-group-arn :type
                         (common-lisp:or target-group-arn common-lisp:null)
                         :accessor %delete-target-group-input-target-group-arn
                         :initform
                         (common-lisp:error ":target-group-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-target-group-input
                    'make-delete-target-group-input))
 (common-lisp:defun make-delete-target-group-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-group-arn)
   (common-lisp:apply #'common-lisp:make-instance 'delete-target-group-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-target-group-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-target-group-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-arn))
      (common-lisp:list
       (common-lisp:cons "TargetGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-target-group-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-target-group-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-target-group-output
                    'make-delete-target-group-output))
 (common-lisp:defun make-delete-target-group-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-target-group-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-target-group-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-target-group-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-target-group-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-targets-input common-lisp:nil
                       ((targets :initarg :targets :type
                         (common-lisp:or target-descriptions common-lisp:null)
                         :accessor %deregister-targets-input-targets :initform
                         (common-lisp:error ":targets is required"))
                        (target-group-arn :initarg :target-group-arn :type
                         (common-lisp:or target-group-arn common-lisp:null)
                         :accessor %deregister-targets-input-target-group-arn
                         :initform
                         (common-lisp:error ":target-group-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'deregister-targets-input 'make-deregister-targets-input))
 (common-lisp:defun make-deregister-targets-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key targets target-group-arn)
   (common-lisp:apply #'common-lisp:make-instance 'deregister-targets-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-targets-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-targets-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-arn))
      (common-lisp:list
       (common-lisp:cons "TargetGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-targets-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-targets-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'deregister-targets-output
                    'make-deregister-targets-output))
 (common-lisp:defun make-deregister-targets-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'deregister-targets-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-targets-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-targets-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-targets-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-account-limits-input common-lisp:nil
                       ((page-size :initarg :page-size :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         %describe-account-limits-input-page-size :initform
                         common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         %describe-account-limits-input-marker :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-account-limits-input
                    'make-describe-account-limits-input))
 (common-lisp:defun make-describe-account-limits-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key page-size marker)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-account-limits-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-account-limits-output common-lisp:nil
                       ((next-marker :initarg :next-marker :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         %describe-account-limits-output-next-marker :initform
                         common-lisp:nil)
                        (limits :initarg :limits :type
                         (common-lisp:or limits common-lisp:null) :accessor
                         %describe-account-limits-output-limits :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-account-limits-output
                    'make-describe-account-limits-output))
 (common-lisp:defun make-describe-account-limits-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-marker limits)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-account-limits-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limits))
      (common-lisp:list
       (common-lisp:cons "Limits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-listener-certificates-input common-lisp:nil
                       ((page-size :initarg :page-size :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         %describe-listener-certificates-input-page-size
                         :initform common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         %describe-listener-certificates-input-marker :initform
                         common-lisp:nil)
                        (listener-arn :initarg :listener-arn :type
                         (common-lisp:or listener-arn common-lisp:null)
                         :accessor
                         %describe-listener-certificates-input-listener-arn
                         :initform
                         (common-lisp:error ":listener-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-listener-certificates-input
                    'make-describe-listener-certificates-input))
 (common-lisp:defun make-describe-listener-certificates-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key page-size marker listener-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-listener-certificates-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-listener-certificates-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-listener-certificates-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-arn))
      (common-lisp:list
       (common-lisp:cons "ListenerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-listener-certificates-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-listener-certificates-output common-lisp:nil
                       ((next-marker :initarg :next-marker :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         %describe-listener-certificates-output-next-marker
                         :initform common-lisp:nil)
                        (certificates :initarg :certificates :type
                         (common-lisp:or certificate-list common-lisp:null)
                         :accessor
                         %describe-listener-certificates-output-certificates
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-listener-certificates-output
                    'make-describe-listener-certificates-output))
 (common-lisp:defun make-describe-listener-certificates-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-marker certificates)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-listener-certificates-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-listener-certificates-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-listener-certificates-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificates))
      (common-lisp:list
       (common-lisp:cons "Certificates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-listener-certificates-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-listeners-input common-lisp:nil
                       ((page-size :initarg :page-size :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         %describe-listeners-input-page-size :initform
                         common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         %describe-listeners-input-marker :initform
                         common-lisp:nil)
                        (listener-arns :initarg :listener-arns :type
                         (common-lisp:or listener-arns common-lisp:null)
                         :accessor %describe-listeners-input-listener-arns
                         :initform common-lisp:nil)
                        (load-balancer-arn :initarg :load-balancer-arn :type
                         (common-lisp:or load-balancer-arn common-lisp:null)
                         :accessor %describe-listeners-input-load-balancer-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-listeners-input 'make-describe-listeners-input))
 (common-lisp:defun make-describe-listeners-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key page-size marker listener-arns
                     load-balancer-arn)
   (common-lisp:apply #'common-lisp:make-instance 'describe-listeners-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-listeners-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-listeners-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-arn))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-arns))
      (common-lisp:list
       (common-lisp:cons "ListenerArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-listeners-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-listeners-output common-lisp:nil
                       ((next-marker :initarg :next-marker :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         %describe-listeners-output-next-marker :initform
                         common-lisp:nil)
                        (listeners :initarg :listeners :type
                         (common-lisp:or listeners common-lisp:null) :accessor
                         %describe-listeners-output-listeners :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-listeners-output
                    'make-describe-listeners-output))
 (common-lisp:defun make-describe-listeners-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-marker listeners)
   (common-lisp:apply #'common-lisp:make-instance 'describe-listeners-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-listeners-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-listeners-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listeners))
      (common-lisp:list
       (common-lisp:cons "Listeners"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-listeners-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-load-balancer-attributes-input common-lisp:nil
                       ((load-balancer-arn :initarg :load-balancer-arn :type
                         (common-lisp:or load-balancer-arn common-lisp:null)
                         :accessor
                         %describe-load-balancer-attributes-input-load-balancer-arn
                         :initform
                         (common-lisp:error
                          ":load-balancer-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-load-balancer-attributes-input
                    'make-describe-load-balancer-attributes-input))
 (common-lisp:defun make-describe-load-balancer-attributes-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key load-balancer-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-load-balancer-attributes-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-attributes-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-attributes-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-arn))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-attributes-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-load-balancer-attributes-output common-lisp:nil
                       ((attributes :initarg :attributes :type
                         (common-lisp:or load-balancer-attributes
                                         common-lisp:null)
                         :accessor
                         %describe-load-balancer-attributes-output-attributes
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-load-balancer-attributes-output
                    'make-describe-load-balancer-attributes-output))
 (common-lisp:defun make-describe-load-balancer-attributes-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key attributes)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-load-balancer-attributes-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-attributes-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-attributes-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancer-attributes-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-load-balancers-input common-lisp:nil
                       ((page-size :initarg :page-size :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         %describe-load-balancers-input-page-size :initform
                         common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         %describe-load-balancers-input-marker :initform
                         common-lisp:nil)
                        (names :initarg :names :type
                         (common-lisp:or load-balancer-names common-lisp:null)
                         :accessor %describe-load-balancers-input-names
                         :initform common-lisp:nil)
                        (load-balancer-arns :initarg :load-balancer-arns :type
                         (common-lisp:or load-balancer-arns common-lisp:null)
                         :accessor
                         %describe-load-balancers-input-load-balancer-arns
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-load-balancers-input
                    'make-describe-load-balancers-input))
 (common-lisp:defun make-describe-load-balancers-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key page-size marker names
                     load-balancer-arns)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-load-balancers-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancers-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancers-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-arns))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'names))
      (common-lisp:list
       (common-lisp:cons "Names"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancers-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-load-balancers-output common-lisp:nil
                       ((next-marker :initarg :next-marker :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         %describe-load-balancers-output-next-marker :initform
                         common-lisp:nil)
                        (load-balancers :initarg :load-balancers :type
                         (common-lisp:or load-balancers common-lisp:null)
                         :accessor
                         %describe-load-balancers-output-load-balancers
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-load-balancers-output
                    'make-describe-load-balancers-output))
 (common-lisp:defun make-describe-load-balancers-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-marker load-balancers)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-load-balancers-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancers-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancers-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancers))
      (common-lisp:list
       (common-lisp:cons "LoadBalancers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-balancers-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-rules-input common-lisp:nil
                       ((page-size :initarg :page-size :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         %describe-rules-input-page-size :initform
                         common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         %describe-rules-input-marker :initform
                         common-lisp:nil)
                        (rule-arns :initarg :rule-arns :type
                         (common-lisp:or rule-arns common-lisp:null) :accessor
                         %describe-rules-input-rule-arns :initform
                         common-lisp:nil)
                        (listener-arn :initarg :listener-arn :type
                         (common-lisp:or listener-arn common-lisp:null)
                         :accessor %describe-rules-input-listener-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-rules-input 'make-describe-rules-input))
 (common-lisp:defun make-describe-rules-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key page-size marker rule-arns listener-arn)
   (common-lisp:apply #'common-lisp:make-instance 'describe-rules-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-rules-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-rules-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-arn))
      (common-lisp:list
       (common-lisp:cons "ListenerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-arns))
      (common-lisp:list
       (common-lisp:cons "RuleArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-rules-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-rules-output common-lisp:nil
                       ((next-marker :initarg :next-marker :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         %describe-rules-output-next-marker :initform
                         common-lisp:nil)
                        (rules :initarg :rules :type
                         (common-lisp:or rules common-lisp:null) :accessor
                         %describe-rules-output-rules :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-rules-output 'make-describe-rules-output))
 (common-lisp:defun make-describe-rules-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-marker rules)
   (common-lisp:apply #'common-lisp:make-instance 'describe-rules-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-rules-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-rules-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-rules-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-sslpolicies-input common-lisp:nil
                       ((load-balancer-type :initarg :load-balancer-type :type
                         (common-lisp:or load-balancer-type-enum
                                         common-lisp:null)
                         :accessor
                         %describe-sslpolicies-input-load-balancer-type
                         :initform common-lisp:nil)
                        (page-size :initarg :page-size :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         %describe-sslpolicies-input-page-size :initform
                         common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         %describe-sslpolicies-input-marker :initform
                         common-lisp:nil)
                        (names :initarg :names :type
                         (common-lisp:or ssl-policy-names common-lisp:null)
                         :accessor %describe-sslpolicies-input-names :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-sslpolicies-input
                    'make-describe-sslpolicies-input))
 (common-lisp:defun make-describe-sslpolicies-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key load-balancer-type page-size marker
                     names)
   (common-lisp:apply #'common-lisp:make-instance 'describe-sslpolicies-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-sslpolicies-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-sslpolicies-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'names))
      (common-lisp:list
       (common-lisp:cons "Names"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-type))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-sslpolicies-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-sslpolicies-output common-lisp:nil
                       ((next-marker :initarg :next-marker :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         %describe-sslpolicies-output-next-marker :initform
                         common-lisp:nil)
                        (ssl-policies :initarg :ssl-policies :type
                         (common-lisp:or ssl-policies common-lisp:null)
                         :accessor %describe-sslpolicies-output-ssl-policies
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-sslpolicies-output
                    'make-describe-sslpolicies-output))
 (common-lisp:defun make-describe-sslpolicies-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-marker ssl-policies)
   (common-lisp:apply #'common-lisp:make-instance 'describe-sslpolicies-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-sslpolicies-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-sslpolicies-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssl-policies))
      (common-lisp:list
       (common-lisp:cons "SslPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-sslpolicies-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-tags-input common-lisp:nil
                       ((resource-arns :initarg :resource-arns :type
                         (common-lisp:or resource-arns common-lisp:null)
                         :accessor %describe-tags-input-resource-arns :initform
                         (common-lisp:error ":resource-arns is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-tags-input 'make-describe-tags-input))
 (common-lisp:defun make-describe-tags-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arns)
   (common-lisp:apply #'common-lisp:make-instance 'describe-tags-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-tags-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-tags-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arns))
      (common-lisp:list
       (common-lisp:cons "ResourceArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-tags-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-tags-output common-lisp:nil
                       ((tag-descriptions :initarg :tag-descriptions :type
                         (common-lisp:or tag-descriptions common-lisp:null)
                         :accessor %describe-tags-output-tag-descriptions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-tags-output 'make-describe-tags-output))
 (common-lisp:defun make-describe-tags-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-descriptions)
   (common-lisp:apply #'common-lisp:make-instance 'describe-tags-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-tags-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-tags-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-descriptions))
      (common-lisp:list
       (common-lisp:cons "TagDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-tags-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-target-group-attributes-input common-lisp:nil
                       ((target-group-arn :initarg :target-group-arn :type
                         (common-lisp:or target-group-arn common-lisp:null)
                         :accessor
                         %describe-target-group-attributes-input-target-group-arn
                         :initform
                         (common-lisp:error ":target-group-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-target-group-attributes-input
                    'make-describe-target-group-attributes-input))
 (common-lisp:defun make-describe-target-group-attributes-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-group-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-target-group-attributes-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-target-group-attributes-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-target-group-attributes-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-arn))
      (common-lisp:list
       (common-lisp:cons "TargetGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-target-group-attributes-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-target-group-attributes-output common-lisp:nil
                       ((attributes :initarg :attributes :type
                         (common-lisp:or target-group-attributes
                                         common-lisp:null)
                         :accessor
                         %describe-target-group-attributes-output-attributes
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-target-group-attributes-output
                    'make-describe-target-group-attributes-output))
 (common-lisp:defun make-describe-target-group-attributes-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key attributes)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-target-group-attributes-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-target-group-attributes-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-target-group-attributes-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-target-group-attributes-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-target-groups-input common-lisp:nil
                       ((page-size :initarg :page-size :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         %describe-target-groups-input-page-size :initform
                         common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         %describe-target-groups-input-marker :initform
                         common-lisp:nil)
                        (names :initarg :names :type
                         (common-lisp:or target-group-names common-lisp:null)
                         :accessor %describe-target-groups-input-names
                         :initform common-lisp:nil)
                        (target-group-arns :initarg :target-group-arns :type
                         (common-lisp:or target-group-arns common-lisp:null)
                         :accessor
                         %describe-target-groups-input-target-group-arns
                         :initform common-lisp:nil)
                        (load-balancer-arn :initarg :load-balancer-arn :type
                         (common-lisp:or load-balancer-arn common-lisp:null)
                         :accessor
                         %describe-target-groups-input-load-balancer-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-target-groups-input
                    'make-describe-target-groups-input))
 (common-lisp:defun make-describe-target-groups-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key page-size marker names target-group-arns
                     load-balancer-arn)
   (common-lisp:apply #'common-lisp:make-instance 'describe-target-groups-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-target-groups-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-target-groups-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-arn))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-arns))
      (common-lisp:list
       (common-lisp:cons "TargetGroupArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'names))
      (common-lisp:list
       (common-lisp:cons "Names"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-target-groups-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-target-groups-output common-lisp:nil
                       ((next-marker :initarg :next-marker :type
                         (common-lisp:or marker common-lisp:null) :accessor
                         %describe-target-groups-output-next-marker :initform
                         common-lisp:nil)
                        (target-groups :initarg :target-groups :type
                         (common-lisp:or target-groups common-lisp:null)
                         :accessor %describe-target-groups-output-target-groups
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-target-groups-output
                    'make-describe-target-groups-output))
 (common-lisp:defun make-describe-target-groups-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-marker target-groups)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-target-groups-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-target-groups-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-target-groups-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-groups))
      (common-lisp:list
       (common-lisp:cons "TargetGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-target-groups-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-target-health-input common-lisp:nil
                       ((targets :initarg :targets :type
                         (common-lisp:or target-descriptions common-lisp:null)
                         :accessor %describe-target-health-input-targets
                         :initform common-lisp:nil)
                        (target-group-arn :initarg :target-group-arn :type
                         (common-lisp:or target-group-arn common-lisp:null)
                         :accessor
                         %describe-target-health-input-target-group-arn
                         :initform
                         (common-lisp:error ":target-group-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-target-health-input
                    'make-describe-target-health-input))
 (common-lisp:defun make-describe-target-health-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key targets target-group-arn)
   (common-lisp:apply #'common-lisp:make-instance 'describe-target-health-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-target-health-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-target-health-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-arn))
      (common-lisp:list
       (common-lisp:cons "TargetGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-target-health-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-target-health-output common-lisp:nil
                       ((target-health-descriptions :initarg
                         :target-health-descriptions :type
                         (common-lisp:or target-health-descriptions
                                         common-lisp:null)
                         :accessor
                         %describe-target-health-output-target-health-descriptions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-target-health-output
                    'make-describe-target-health-output))
 (common-lisp:defun make-describe-target-health-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-health-descriptions)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-target-health-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-target-health-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-target-health-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-health-descriptions))
      (common-lisp:list
       (common-lisp:cons "TargetHealthDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-target-health-output))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition duplicate-listener-exception
     (elbv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'duplicate-listener-exception)))
(common-lisp:progn
 (common-lisp:define-condition duplicate-load-balancer-name-exception
     (elbv2-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'duplicate-load-balancer-name-exception)))
(common-lisp:progn
 (common-lisp:define-condition duplicate-tag-keys-exception
     (elbv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'duplicate-tag-keys-exception)))
(common-lisp:progn
 (common-lisp:define-condition duplicate-target-group-name-exception
     (elbv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'duplicate-target-group-name-exception)))
(common-lisp:progn
 (common-lisp:defclass fixed-response-action-config common-lisp:nil
                       ((content-type :initarg :content-type :type
                         (common-lisp:or fixed-response-action-content-type
                                         common-lisp:null)
                         :accessor %fixed-response-action-config-content-type
                         :initform common-lisp:nil)
                        (status-code :initarg :status-code :type
                         (common-lisp:or fixed-response-action-status-code
                                         common-lisp:null)
                         :accessor %fixed-response-action-config-status-code
                         :initform
                         (common-lisp:error ":status-code is required"))
                        (message-body :initarg :message-body :type
                         (common-lisp:or fixed-response-action-message
                                         common-lisp:null)
                         :accessor %fixed-response-action-config-message-body
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'fixed-response-action-config
                    'make-fixed-response-action-config))
 (common-lisp:defun make-fixed-response-action-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key content-type status-code message-body)
   (common-lisp:apply #'common-lisp:make-instance 'fixed-response-action-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          fixed-response-action-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          fixed-response-action-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-body))
      (common-lisp:list
       (common-lisp:cons "MessageBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "StatusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "ContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          fixed-response-action-config))
   common-lisp:nil))
(common-lisp:deftype fixed-response-action-content-type () 'common-lisp:string)
(common-lisp:deftype fixed-response-action-message () 'common-lisp:string)
(common-lisp:deftype fixed-response-action-status-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass forward-action-config common-lisp:nil
                       ((target-group-stickiness-config :initarg
                         :target-group-stickiness-config :type
                         (common-lisp:or target-group-stickiness-config
                                         common-lisp:null)
                         :accessor
                         %forward-action-config-target-group-stickiness-config
                         :initform common-lisp:nil)
                        (target-groups :initarg :target-groups :type
                         (common-lisp:or target-group-list common-lisp:null)
                         :accessor %forward-action-config-target-groups
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'forward-action-config 'make-forward-action-config))
 (common-lisp:defun make-forward-action-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-group-stickiness-config
                     target-groups)
   (common-lisp:apply #'common-lisp:make-instance 'forward-action-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          forward-action-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          forward-action-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-groups))
      (common-lisp:list
       (common-lisp:cons "TargetGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-group-stickiness-config))
      (common-lisp:list
       (common-lisp:cons "TargetGroupStickinessConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          forward-action-config))
   common-lisp:nil))
(common-lisp:deftype grpc-code () 'common-lisp:string)
(common-lisp:deftype health-check-enabled () 'common-lisp:boolean)
(common-lisp:deftype health-check-interval-seconds () 'common-lisp:integer)
(common-lisp:deftype health-check-port () 'common-lisp:string)
(common-lisp:deftype health-check-threshold-count () 'common-lisp:integer)
(common-lisp:deftype health-check-timeout-seconds () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition health-unavailable-exception
     (elbv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'health-unavailable-exception)))
(common-lisp:progn
 (common-lisp:defclass host-header-condition-config common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or list-of-string common-lisp:null)
                         :accessor %host-header-condition-config-values
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'host-header-condition-config
                    'make-host-header-condition-config))
 (common-lisp:defun make-host-header-condition-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values)
   (common-lisp:apply #'common-lisp:make-instance 'host-header-condition-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          host-header-condition-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          host-header-condition-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          host-header-condition-config))
   common-lisp:nil))
(common-lisp:deftype http-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass http-header-condition-config common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or list-of-string common-lisp:null)
                         :accessor %http-header-condition-config-values
                         :initform common-lisp:nil)
                        (http-header-name :initarg :http-header-name :type
                         (common-lisp:or http-header-condition-name
                                         common-lisp:null)
                         :accessor
                         %http-header-condition-config-http-header-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'http-header-condition-config
                    'make-http-header-condition-config))
 (common-lisp:defun make-http-header-condition-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values http-header-name)
   (common-lisp:apply #'common-lisp:make-instance 'http-header-condition-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          http-header-condition-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          http-header-condition-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-header-name))
      (common-lisp:list
       (common-lisp:cons "HttpHeaderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          http-header-condition-config))
   common-lisp:nil))
(common-lisp:deftype http-header-condition-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass http-request-method-condition-config common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or list-of-string common-lisp:null)
                         :accessor %http-request-method-condition-config-values
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'http-request-method-condition-config
                    'make-http-request-method-condition-config))
 (common-lisp:defun make-http-request-method-condition-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values)
   (common-lisp:apply #'common-lisp:make-instance
                      'http-request-method-condition-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          http-request-method-condition-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          http-request-method-condition-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          http-request-method-condition-config))
   common-lisp:nil))
(common-lisp:deftype ipv6address () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition incompatible-protocols-exception
     (elbv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'incompatible-protocols-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-configuration-request-exception
     (elbv2-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-configuration-request-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-load-balancer-action-exception
     (elbv2-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-load-balancer-action-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-scheme-exception
     (elbv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-scheme-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-security-group-exception
     (elbv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-security-group-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-subnet-exception
     (elbv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-subnet-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-target-exception
     (elbv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-target-exception)))
(common-lisp:deftype ip-address () 'common-lisp:string)
(common-lisp:deftype ip-address-type () 'common-lisp:string)
(common-lisp:deftype is-default () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass limit common-lisp:nil
                       ((max :initarg :max :type
                         (common-lisp:or max common-lisp:null) :accessor
                         %limit-max :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %limit-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'limit 'make-limit))
 (common-lisp:defun make-limit
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max name)
   (common-lisp:apply #'common-lisp:make-instance 'limit
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input limit))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input limit))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "Max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input limit))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype limits () '(trivial-types:proper-list limit))
 (common-lisp:defun |make-limits|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list limit))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-string ()
   '(trivial-types:proper-list string-value))
 (common-lisp:defun |make-list-of-string|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass listener common-lisp:nil
                       ((alpn-policy :initarg :alpn-policy :type
                         (common-lisp:or alpn-policy-name common-lisp:null)
                         :accessor %listener-alpn-policy :initform
                         common-lisp:nil)
                        (default-actions :initarg :default-actions :type
                         (common-lisp:or actions common-lisp:null) :accessor
                         %listener-default-actions :initform common-lisp:nil)
                        (ssl-policy :initarg :ssl-policy :type
                         (common-lisp:or ssl-policy-name common-lisp:null)
                         :accessor %listener-ssl-policy :initform
                         common-lisp:nil)
                        (certificates :initarg :certificates :type
                         (common-lisp:or certificate-list common-lisp:null)
                         :accessor %listener-certificates :initform
                         common-lisp:nil)
                        (protocol :initarg :protocol :type
                         (common-lisp:or protocol-enum common-lisp:null)
                         :accessor %listener-protocol :initform
                         common-lisp:nil)
                        (port :initarg :port :type
                         (common-lisp:or port common-lisp:null) :accessor
                         %listener-port :initform common-lisp:nil)
                        (load-balancer-arn :initarg :load-balancer-arn :type
                         (common-lisp:or load-balancer-arn common-lisp:null)
                         :accessor %listener-load-balancer-arn :initform
                         common-lisp:nil)
                        (listener-arn :initarg :listener-arn :type
                         (common-lisp:or listener-arn common-lisp:null)
                         :accessor %listener-listener-arn :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'listener 'make-listener))
 (common-lisp:defun make-listener
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alpn-policy default-actions ssl-policy
                     certificates protocol port load-balancer-arn listener-arn)
   (common-lisp:apply #'common-lisp:make-instance 'listener
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listener))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listener))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-arn))
      (common-lisp:list
       (common-lisp:cons "ListenerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-arn))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificates))
      (common-lisp:list
       (common-lisp:cons "Certificates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssl-policy))
      (common-lisp:list
       (common-lisp:cons "SslPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-actions))
      (common-lisp:list
       (common-lisp:cons "DefaultActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alpn-policy))
      (common-lisp:list
       (common-lisp:cons "AlpnPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listener))
   common-lisp:nil))
(common-lisp:deftype listener-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype listener-arns ()
   '(trivial-types:proper-list listener-arn))
 (common-lisp:defun |make-listener-arns|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list listener-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition listener-not-found-exception
     (elbv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'listener-not-found-exception)))
(common-lisp:progn
 (common-lisp:deftype listeners () '(trivial-types:proper-list listener))
 (common-lisp:defun |make-listeners|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list listener))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass load-balancer common-lisp:nil
                       ((customer-owned-ipv4pool :initarg
                         :customer-owned-ipv4pool :type
                         (common-lisp:or customer-owned-ipv4pool
                                         common-lisp:null)
                         :accessor %load-balancer-customer-owned-ipv4pool
                         :initform common-lisp:nil)
                        (ip-address-type :initarg :ip-address-type :type
                         (common-lisp:or ip-address-type common-lisp:null)
                         :accessor %load-balancer-ip-address-type :initform
                         common-lisp:nil)
                        (security-groups :initarg :security-groups :type
                         (common-lisp:or security-groups common-lisp:null)
                         :accessor %load-balancer-security-groups :initform
                         common-lisp:nil)
                        (availability-zones :initarg :availability-zones :type
                         (common-lisp:or availability-zones common-lisp:null)
                         :accessor %load-balancer-availability-zones :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or load-balancer-type-enum
                                         common-lisp:null)
                         :accessor %load-balancer-type :initform
                         common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or load-balancer-state common-lisp:null)
                         :accessor %load-balancer-state :initform
                         common-lisp:nil)
                        (vpc-id :initarg :vpc-id :type
                         (common-lisp:or vpc-id common-lisp:null) :accessor
                         %load-balancer-vpc-id :initform common-lisp:nil)
                        (scheme :initarg :scheme :type
                         (common-lisp:or load-balancer-scheme-enum
                                         common-lisp:null)
                         :accessor %load-balancer-scheme :initform
                         common-lisp:nil)
                        (load-balancer-name :initarg :load-balancer-name :type
                         (common-lisp:or load-balancer-name common-lisp:null)
                         :accessor %load-balancer-load-balancer-name :initform
                         common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or created-time common-lisp:null)
                         :accessor %load-balancer-created-time :initform
                         common-lisp:nil)
                        (canonical-hosted-zone-id :initarg
                         :canonical-hosted-zone-id :type
                         (common-lisp:or canonical-hosted-zone-id
                                         common-lisp:null)
                         :accessor %load-balancer-canonical-hosted-zone-id
                         :initform common-lisp:nil)
                        (dnsname :initarg :dnsname :type
                         (common-lisp:or dnsname common-lisp:null) :accessor
                         %load-balancer-dnsname :initform common-lisp:nil)
                        (load-balancer-arn :initarg :load-balancer-arn :type
                         (common-lisp:or load-balancer-arn common-lisp:null)
                         :accessor %load-balancer-load-balancer-arn :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'load-balancer 'make-load-balancer))
 (common-lisp:defun make-load-balancer
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key customer-owned-ipv4pool ip-address-type
                     security-groups availability-zones type state vpc-id
                     scheme load-balancer-name created-time
                     canonical-hosted-zone-id dnsname load-balancer-arn)
   (common-lisp:apply #'common-lisp:make-instance 'load-balancer
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input load-balancer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input load-balancer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-arn))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dnsname))
      (common-lisp:list
       (common-lisp:cons "DNSName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'canonical-hosted-zone-id))
      (common-lisp:list
       (common-lisp:cons "CanonicalHostedZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheme))
      (common-lisp:list
       (common-lisp:cons "Scheme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "IpAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-owned-ipv4pool))
      (common-lisp:list
       (common-lisp:cons "CustomerOwnedIpv4Pool"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input load-balancer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass load-balancer-address common-lisp:nil
                       ((ipv6address :initarg :ipv6address :type
                         (common-lisp:or ipv6address common-lisp:null)
                         :accessor %load-balancer-address-ipv6address :initform
                         common-lisp:nil)
                        (private-ipv4address :initarg :private-ipv4address
                         :type
                         (common-lisp:or private-ipv4address common-lisp:null)
                         :accessor %load-balancer-address-private-ipv4address
                         :initform common-lisp:nil)
                        (allocation-id :initarg :allocation-id :type
                         (common-lisp:or allocation-id common-lisp:null)
                         :accessor %load-balancer-address-allocation-id
                         :initform common-lisp:nil)
                        (ip-address :initarg :ip-address :type
                         (common-lisp:or ip-address common-lisp:null) :accessor
                         %load-balancer-address-ip-address :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'load-balancer-address 'make-load-balancer-address))
 (common-lisp:defun make-load-balancer-address
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ipv6address private-ipv4address
                     allocation-id ip-address)
   (common-lisp:apply #'common-lisp:make-instance 'load-balancer-address
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-address))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-address))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocation-id))
      (common-lisp:list
       (common-lisp:cons "AllocationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-ipv4address))
      (common-lisp:list
       (common-lisp:cons "PrivateIPv4Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6address))
      (common-lisp:list
       (common-lisp:cons "IPv6Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-address))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype load-balancer-addresses ()
   '(trivial-types:proper-list load-balancer-address))
 (common-lisp:defun |make-load-balancer-addresses|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list load-balancer-address))
   aws-sdk/generator/shape::members))
(common-lisp:deftype load-balancer-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype load-balancer-arns ()
   '(trivial-types:proper-list load-balancer-arn))
 (common-lisp:defun |make-load-balancer-arns|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list load-balancer-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass load-balancer-attribute common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or load-balancer-attribute-value
                                         common-lisp:null)
                         :accessor %load-balancer-attribute-value :initform
                         common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or load-balancer-attribute-key
                                         common-lisp:null)
                         :accessor %load-balancer-attribute-key :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'load-balancer-attribute 'make-load-balancer-attribute))
 (common-lisp:defun make-load-balancer-attribute
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'load-balancer-attribute
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-attribute))
   common-lisp:nil))
(common-lisp:deftype load-balancer-attribute-key () 'common-lisp:string)
(common-lisp:deftype load-balancer-attribute-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype load-balancer-attributes ()
   '(trivial-types:proper-list load-balancer-attribute))
 (common-lisp:defun |make-load-balancer-attributes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list load-balancer-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:deftype load-balancer-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype load-balancer-names ()
   '(trivial-types:proper-list load-balancer-name))
 (common-lisp:defun |make-load-balancer-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list load-balancer-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition load-balancer-not-found-exception
     (elbv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'load-balancer-not-found-exception)))
(common-lisp:deftype load-balancer-scheme-enum () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass load-balancer-state common-lisp:nil
                       ((reason :initarg :reason :type
                         (common-lisp:or state-reason common-lisp:null)
                         :accessor %load-balancer-state-reason :initform
                         common-lisp:nil)
                        (code :initarg :code :type
                         (common-lisp:or load-balancer-state-enum
                                         common-lisp:null)
                         :accessor %load-balancer-state-code :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'load-balancer-state 'make-load-balancer-state))
 (common-lisp:defun make-load-balancer-state
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reason code)
   (common-lisp:apply #'common-lisp:make-instance 'load-balancer-state
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input load-balancer-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input load-balancer-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input load-balancer-state))
   common-lisp:nil))
(common-lisp:deftype load-balancer-state-enum () 'common-lisp:string)
(common-lisp:deftype load-balancer-type-enum () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype load-balancers ()
   '(trivial-types:proper-list load-balancer))
 (common-lisp:defun |make-load-balancers|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list load-balancer))
   aws-sdk/generator/shape::members))
(common-lisp:deftype marker () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass matcher common-lisp:nil
                       ((grpc-code :initarg :grpc-code :type
                         (common-lisp:or grpc-code common-lisp:null) :accessor
                         %matcher-grpc-code :initform common-lisp:nil)
                        (http-code :initarg :http-code :type
                         (common-lisp:or http-code common-lisp:null) :accessor
                         %matcher-http-code :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'matcher 'make-matcher))
 (common-lisp:defun make-matcher
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key grpc-code http-code)
   (common-lisp:apply #'common-lisp:make-instance 'matcher
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input matcher))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input matcher))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-code))
      (common-lisp:list
       (common-lisp:cons "HttpCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grpc-code))
      (common-lisp:list
       (common-lisp:cons "GrpcCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input matcher))
   common-lisp:nil))
(common-lisp:deftype max () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass modify-listener-input common-lisp:nil
                       ((alpn-policy :initarg :alpn-policy :type
                         (common-lisp:or alpn-policy-name common-lisp:null)
                         :accessor %modify-listener-input-alpn-policy :initform
                         common-lisp:nil)
                        (default-actions :initarg :default-actions :type
                         (common-lisp:or actions common-lisp:null) :accessor
                         %modify-listener-input-default-actions :initform
                         common-lisp:nil)
                        (certificates :initarg :certificates :type
                         (common-lisp:or certificate-list common-lisp:null)
                         :accessor %modify-listener-input-certificates
                         :initform common-lisp:nil)
                        (ssl-policy :initarg :ssl-policy :type
                         (common-lisp:or ssl-policy-name common-lisp:null)
                         :accessor %modify-listener-input-ssl-policy :initform
                         common-lisp:nil)
                        (protocol :initarg :protocol :type
                         (common-lisp:or protocol-enum common-lisp:null)
                         :accessor %modify-listener-input-protocol :initform
                         common-lisp:nil)
                        (port :initarg :port :type
                         (common-lisp:or port common-lisp:null) :accessor
                         %modify-listener-input-port :initform common-lisp:nil)
                        (listener-arn :initarg :listener-arn :type
                         (common-lisp:or listener-arn common-lisp:null)
                         :accessor %modify-listener-input-listener-arn
                         :initform
                         (common-lisp:error ":listener-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'modify-listener-input 'make-modify-listener-input))
 (common-lisp:defun make-modify-listener-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alpn-policy default-actions certificates
                     ssl-policy protocol port listener-arn)
   (common-lisp:apply #'common-lisp:make-instance 'modify-listener-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-listener-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-listener-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-arn))
      (common-lisp:list
       (common-lisp:cons "ListenerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssl-policy))
      (common-lisp:list
       (common-lisp:cons "SslPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificates))
      (common-lisp:list
       (common-lisp:cons "Certificates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-actions))
      (common-lisp:list
       (common-lisp:cons "DefaultActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alpn-policy))
      (common-lisp:list
       (common-lisp:cons "AlpnPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-listener-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-listener-output common-lisp:nil
                       ((listeners :initarg :listeners :type
                         (common-lisp:or listeners common-lisp:null) :accessor
                         %modify-listener-output-listeners :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'modify-listener-output 'make-modify-listener-output))
 (common-lisp:defun make-modify-listener-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key listeners)
   (common-lisp:apply #'common-lisp:make-instance 'modify-listener-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-listener-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-listener-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listeners))
      (common-lisp:list
       (common-lisp:cons "Listeners"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-listener-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-load-balancer-attributes-input common-lisp:nil
                       ((attributes :initarg :attributes :type
                         (common-lisp:or load-balancer-attributes
                                         common-lisp:null)
                         :accessor
                         %modify-load-balancer-attributes-input-attributes
                         :initform
                         (common-lisp:error ":attributes is required"))
                        (load-balancer-arn :initarg :load-balancer-arn :type
                         (common-lisp:or load-balancer-arn common-lisp:null)
                         :accessor
                         %modify-load-balancer-attributes-input-load-balancer-arn
                         :initform
                         (common-lisp:error
                          ":load-balancer-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'modify-load-balancer-attributes-input
                    'make-modify-load-balancer-attributes-input))
 (common-lisp:defun make-modify-load-balancer-attributes-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key attributes load-balancer-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-load-balancer-attributes-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-load-balancer-attributes-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-load-balancer-attributes-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-arn))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-load-balancer-attributes-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-load-balancer-attributes-output common-lisp:nil
                       ((attributes :initarg :attributes :type
                         (common-lisp:or load-balancer-attributes
                                         common-lisp:null)
                         :accessor
                         %modify-load-balancer-attributes-output-attributes
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'modify-load-balancer-attributes-output
                    'make-modify-load-balancer-attributes-output))
 (common-lisp:defun make-modify-load-balancer-attributes-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key attributes)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-load-balancer-attributes-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-load-balancer-attributes-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-load-balancer-attributes-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-load-balancer-attributes-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-rule-input common-lisp:nil
                       ((actions :initarg :actions :type
                         (common-lisp:or actions common-lisp:null) :accessor
                         %modify-rule-input-actions :initform common-lisp:nil)
                        (conditions :initarg :conditions :type
                         (common-lisp:or rule-condition-list common-lisp:null)
                         :accessor %modify-rule-input-conditions :initform
                         common-lisp:nil)
                        (rule-arn :initarg :rule-arn :type
                         (common-lisp:or rule-arn common-lisp:null) :accessor
                         %modify-rule-input-rule-arn :initform
                         (common-lisp:error ":rule-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'modify-rule-input 'make-modify-rule-input))
 (common-lisp:defun make-modify-rule-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key actions conditions rule-arn)
   (common-lisp:apply #'common-lisp:make-instance 'modify-rule-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input modify-rule-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input modify-rule-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-arn))
      (common-lisp:list
       (common-lisp:cons "RuleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conditions))
      (common-lisp:list
       (common-lisp:cons "Conditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input modify-rule-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-rule-output common-lisp:nil
                       ((rules :initarg :rules :type
                         (common-lisp:or rules common-lisp:null) :accessor
                         %modify-rule-output-rules :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'modify-rule-output 'make-modify-rule-output))
 (common-lisp:defun make-modify-rule-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rules)
   (common-lisp:apply #'common-lisp:make-instance 'modify-rule-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input modify-rule-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input modify-rule-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input modify-rule-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-target-group-attributes-input common-lisp:nil
                       ((attributes :initarg :attributes :type
                         (common-lisp:or target-group-attributes
                                         common-lisp:null)
                         :accessor
                         %modify-target-group-attributes-input-attributes
                         :initform
                         (common-lisp:error ":attributes is required"))
                        (target-group-arn :initarg :target-group-arn :type
                         (common-lisp:or target-group-arn common-lisp:null)
                         :accessor
                         %modify-target-group-attributes-input-target-group-arn
                         :initform
                         (common-lisp:error ":target-group-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'modify-target-group-attributes-input
                    'make-modify-target-group-attributes-input))
 (common-lisp:defun make-modify-target-group-attributes-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key attributes target-group-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-target-group-attributes-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-target-group-attributes-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-target-group-attributes-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-arn))
      (common-lisp:list
       (common-lisp:cons "TargetGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-target-group-attributes-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-target-group-attributes-output common-lisp:nil
                       ((attributes :initarg :attributes :type
                         (common-lisp:or target-group-attributes
                                         common-lisp:null)
                         :accessor
                         %modify-target-group-attributes-output-attributes
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'modify-target-group-attributes-output
                    'make-modify-target-group-attributes-output))
 (common-lisp:defun make-modify-target-group-attributes-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key attributes)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-target-group-attributes-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-target-group-attributes-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-target-group-attributes-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-target-group-attributes-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-target-group-input common-lisp:nil
                       ((matcher :initarg :matcher :type
                         (common-lisp:or matcher common-lisp:null) :accessor
                         %modify-target-group-input-matcher :initform
                         common-lisp:nil)
                        (unhealthy-threshold-count :initarg
                         :unhealthy-threshold-count :type
                         (common-lisp:or health-check-threshold-count
                                         common-lisp:null)
                         :accessor
                         %modify-target-group-input-unhealthy-threshold-count
                         :initform common-lisp:nil)
                        (healthy-threshold-count :initarg
                         :healthy-threshold-count :type
                         (common-lisp:or health-check-threshold-count
                                         common-lisp:null)
                         :accessor
                         %modify-target-group-input-healthy-threshold-count
                         :initform common-lisp:nil)
                        (health-check-timeout-seconds :initarg
                         :health-check-timeout-seconds :type
                         (common-lisp:or health-check-timeout-seconds
                                         common-lisp:null)
                         :accessor
                         %modify-target-group-input-health-check-timeout-seconds
                         :initform common-lisp:nil)
                        (health-check-interval-seconds :initarg
                         :health-check-interval-seconds :type
                         (common-lisp:or health-check-interval-seconds
                                         common-lisp:null)
                         :accessor
                         %modify-target-group-input-health-check-interval-seconds
                         :initform common-lisp:nil)
                        (health-check-enabled :initarg :health-check-enabled
                         :type
                         (common-lisp:or health-check-enabled common-lisp:null)
                         :accessor
                         %modify-target-group-input-health-check-enabled
                         :initform common-lisp:nil)
                        (health-check-path :initarg :health-check-path :type
                         (common-lisp:or path common-lisp:null) :accessor
                         %modify-target-group-input-health-check-path :initform
                         common-lisp:nil)
                        (health-check-port :initarg :health-check-port :type
                         (common-lisp:or health-check-port common-lisp:null)
                         :accessor %modify-target-group-input-health-check-port
                         :initform common-lisp:nil)
                        (health-check-protocol :initarg :health-check-protocol
                         :type (common-lisp:or protocol-enum common-lisp:null)
                         :accessor
                         %modify-target-group-input-health-check-protocol
                         :initform common-lisp:nil)
                        (target-group-arn :initarg :target-group-arn :type
                         (common-lisp:or target-group-arn common-lisp:null)
                         :accessor %modify-target-group-input-target-group-arn
                         :initform
                         (common-lisp:error ":target-group-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'modify-target-group-input
                    'make-modify-target-group-input))
 (common-lisp:defun make-modify-target-group-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key matcher unhealthy-threshold-count
                     healthy-threshold-count health-check-timeout-seconds
                     health-check-interval-seconds health-check-enabled
                     health-check-path health-check-port health-check-protocol
                     target-group-arn)
   (common-lisp:apply #'common-lisp:make-instance 'modify-target-group-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-target-group-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-target-group-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-arn))
      (common-lisp:list
       (common-lisp:cons "TargetGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-protocol))
      (common-lisp:list
       (common-lisp:cons "HealthCheckProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check-port))
      (common-lisp:list
       (common-lisp:cons "HealthCheckPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check-path))
      (common-lisp:list
       (common-lisp:cons "HealthCheckPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-enabled))
      (common-lisp:list
       (common-lisp:cons "HealthCheckEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-interval-seconds))
      (common-lisp:list
       (common-lisp:cons "HealthCheckIntervalSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-timeout-seconds))
      (common-lisp:list
       (common-lisp:cons "HealthCheckTimeoutSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'healthy-threshold-count))
      (common-lisp:list
       (common-lisp:cons "HealthyThresholdCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unhealthy-threshold-count))
      (common-lisp:list
       (common-lisp:cons "UnhealthyThresholdCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'matcher))
      (common-lisp:list
       (common-lisp:cons "Matcher"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-target-group-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-target-group-output common-lisp:nil
                       ((target-groups :initarg :target-groups :type
                         (common-lisp:or target-groups common-lisp:null)
                         :accessor %modify-target-group-output-target-groups
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'modify-target-group-output
                    'make-modify-target-group-output))
 (common-lisp:defun make-modify-target-group-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-groups)
   (common-lisp:apply #'common-lisp:make-instance 'modify-target-group-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-target-group-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-target-group-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-groups))
      (common-lisp:list
       (common-lisp:cons "TargetGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-target-group-output))
   common-lisp:nil))
(common-lisp:deftype name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition operation-not-permitted-exception
     (elbv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'operation-not-permitted-exception)))
(common-lisp:deftype outpost-id () 'common-lisp:string)
(common-lisp:deftype page-size () 'common-lisp:integer)
(common-lisp:deftype path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass path-pattern-condition-config common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or list-of-string common-lisp:null)
                         :accessor %path-pattern-condition-config-values
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'path-pattern-condition-config
                    'make-path-pattern-condition-config))
 (common-lisp:defun make-path-pattern-condition-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values)
   (common-lisp:apply #'common-lisp:make-instance
                      'path-pattern-condition-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          path-pattern-condition-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          path-pattern-condition-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          path-pattern-condition-config))
   common-lisp:nil))
(common-lisp:deftype port () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition priority-in-use-exception
     (elbv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'priority-in-use-exception)))
(common-lisp:deftype private-ipv4address () 'common-lisp:string)
(common-lisp:deftype protocol-enum () 'common-lisp:string)
(common-lisp:deftype protocol-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass query-string-condition-config common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or query-string-key-value-pair-list
                                         common-lisp:null)
                         :accessor %query-string-condition-config-values
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'query-string-condition-config
                    'make-query-string-condition-config))
 (common-lisp:defun make-query-string-condition-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values)
   (common-lisp:apply #'common-lisp:make-instance
                      'query-string-condition-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          query-string-condition-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          query-string-condition-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          query-string-condition-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass query-string-key-value-pair common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or string-value common-lisp:null)
                         :accessor %query-string-key-value-pair-value :initform
                         common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or string-value common-lisp:null)
                         :accessor %query-string-key-value-pair-key :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'query-string-key-value-pair
                    'make-query-string-key-value-pair))
 (common-lisp:defun make-query-string-key-value-pair
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'query-string-key-value-pair
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          query-string-key-value-pair))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          query-string-key-value-pair))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          query-string-key-value-pair))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype query-string-key-value-pair-list ()
   '(trivial-types:proper-list query-string-key-value-pair))
 (common-lisp:defun |make-query-string-key-value-pair-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            query-string-key-value-pair))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass redirect-action-config common-lisp:nil
                       ((status-code :initarg :status-code :type
                         (common-lisp:or redirect-action-status-code-enum
                                         common-lisp:null)
                         :accessor %redirect-action-config-status-code
                         :initform
                         (common-lisp:error ":status-code is required"))
                        (query :initarg :query :type
                         (common-lisp:or redirect-action-query
                                         common-lisp:null)
                         :accessor %redirect-action-config-query :initform
                         common-lisp:nil)
                        (path :initarg :path :type
                         (common-lisp:or redirect-action-path common-lisp:null)
                         :accessor %redirect-action-config-path :initform
                         common-lisp:nil)
                        (host :initarg :host :type
                         (common-lisp:or redirect-action-host common-lisp:null)
                         :accessor %redirect-action-config-host :initform
                         common-lisp:nil)
                        (port :initarg :port :type
                         (common-lisp:or redirect-action-port common-lisp:null)
                         :accessor %redirect-action-config-port :initform
                         common-lisp:nil)
                        (protocol :initarg :protocol :type
                         (common-lisp:or redirect-action-protocol
                                         common-lisp:null)
                         :accessor %redirect-action-config-protocol :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'redirect-action-config 'make-redirect-action-config))
 (common-lisp:defun make-redirect-action-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status-code query path host port
                     protocol)
   (common-lisp:apply #'common-lisp:make-instance 'redirect-action-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          redirect-action-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          redirect-action-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host))
      (common-lisp:list
       (common-lisp:cons "Host"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query))
      (common-lisp:list
       (common-lisp:cons "Query"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "StatusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          redirect-action-config))
   common-lisp:nil))
(common-lisp:deftype redirect-action-host () 'common-lisp:string)
(common-lisp:deftype redirect-action-path () 'common-lisp:string)
(common-lisp:deftype redirect-action-port () 'common-lisp:string)
(common-lisp:deftype redirect-action-protocol () 'common-lisp:string)
(common-lisp:deftype redirect-action-query () 'common-lisp:string)
(common-lisp:deftype redirect-action-status-code-enum () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass register-targets-input common-lisp:nil
                       ((targets :initarg :targets :type
                         (common-lisp:or target-descriptions common-lisp:null)
                         :accessor %register-targets-input-targets :initform
                         (common-lisp:error ":targets is required"))
                        (target-group-arn :initarg :target-group-arn :type
                         (common-lisp:or target-group-arn common-lisp:null)
                         :accessor %register-targets-input-target-group-arn
                         :initform
                         (common-lisp:error ":target-group-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'register-targets-input 'make-register-targets-input))
 (common-lisp:defun make-register-targets-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key targets target-group-arn)
   (common-lisp:apply #'common-lisp:make-instance 'register-targets-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-targets-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-targets-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-arn))
      (common-lisp:list
       (common-lisp:cons "TargetGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-targets-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-targets-output common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'register-targets-output 'make-register-targets-output))
 (common-lisp:defun make-register-targets-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'register-targets-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-targets-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-targets-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-targets-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-listener-certificates-input common-lisp:nil
                       ((certificates :initarg :certificates :type
                         (common-lisp:or certificate-list common-lisp:null)
                         :accessor
                         %remove-listener-certificates-input-certificates
                         :initform
                         (common-lisp:error ":certificates is required"))
                        (listener-arn :initarg :listener-arn :type
                         (common-lisp:or listener-arn common-lisp:null)
                         :accessor
                         %remove-listener-certificates-input-listener-arn
                         :initform
                         (common-lisp:error ":listener-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'remove-listener-certificates-input
                    'make-remove-listener-certificates-input))
 (common-lisp:defun make-remove-listener-certificates-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key certificates listener-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-listener-certificates-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-listener-certificates-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-listener-certificates-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-arn))
      (common-lisp:list
       (common-lisp:cons "ListenerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificates))
      (common-lisp:list
       (common-lisp:cons "Certificates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-listener-certificates-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-listener-certificates-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'remove-listener-certificates-output
                    'make-remove-listener-certificates-output))
 (common-lisp:defun make-remove-listener-certificates-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-listener-certificates-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-listener-certificates-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-listener-certificates-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-listener-certificates-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-tags-input common-lisp:nil
                       ((tag-keys :initarg :tag-keys :type
                         (common-lisp:or tag-keys common-lisp:null) :accessor
                         %remove-tags-input-tag-keys :initform
                         (common-lisp:error ":tag-keys is required"))
                        (resource-arns :initarg :resource-arns :type
                         (common-lisp:or resource-arns common-lisp:null)
                         :accessor %remove-tags-input-resource-arns :initform
                         (common-lisp:error ":resource-arns is required"))))
 (common-lisp:export
  (common-lisp:list 'remove-tags-input 'make-remove-tags-input))
 (common-lisp:defun make-remove-tags-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arns)
   (common-lisp:apply #'common-lisp:make-instance 'remove-tags-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input remove-tags-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input remove-tags-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arns))
      (common-lisp:list
       (common-lisp:cons "ResourceArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input remove-tags-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-tags-output common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'remove-tags-output 'make-remove-tags-output))
 (common-lisp:defun make-remove-tags-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'remove-tags-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input remove-tags-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input remove-tags-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input remove-tags-output))
   common-lisp:nil))
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-arns ()
   '(trivial-types:proper-list resource-arn))
 (common-lisp:defun |make-resource-arns|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-in-use-exception
     (elbv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-in-use-exception)))
(common-lisp:progn
 (common-lisp:defclass rule common-lisp:nil
                       ((is-default :initarg :is-default :type
                         (common-lisp:or is-default common-lisp:null) :accessor
                         %rule-is-default :initform common-lisp:nil)
                        (actions :initarg :actions :type
                         (common-lisp:or actions common-lisp:null) :accessor
                         %rule-actions :initform common-lisp:nil)
                        (conditions :initarg :conditions :type
                         (common-lisp:or rule-condition-list common-lisp:null)
                         :accessor %rule-conditions :initform common-lisp:nil)
                        (priority :initarg :priority :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %rule-priority :initform common-lisp:nil)
                        (rule-arn :initarg :rule-arn :type
                         (common-lisp:or rule-arn common-lisp:null) :accessor
                         %rule-rule-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'rule 'make-rule))
 (common-lisp:defun make-rule
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key is-default actions conditions priority
                     rule-arn)
   (common-lisp:apply #'common-lisp:make-instance 'rule
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-arn))
      (common-lisp:list
       (common-lisp:cons "RuleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conditions))
      (common-lisp:list
       (common-lisp:cons "Conditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-default))
      (common-lisp:list
       (common-lisp:cons "IsDefault"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rule))
   common-lisp:nil))
(common-lisp:deftype rule-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype rule-arns () '(trivial-types:proper-list rule-arn))
 (common-lisp:defun |make-rule-arns|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rule-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass rule-condition common-lisp:nil
                       ((source-ip-config :initarg :source-ip-config :type
                         (common-lisp:or source-ip-condition-config
                                         common-lisp:null)
                         :accessor %rule-condition-source-ip-config :initform
                         common-lisp:nil)
                        (http-request-method-config :initarg
                         :http-request-method-config :type
                         (common-lisp:or http-request-method-condition-config
                                         common-lisp:null)
                         :accessor %rule-condition-http-request-method-config
                         :initform common-lisp:nil)
                        (query-string-config :initarg :query-string-config
                         :type
                         (common-lisp:or query-string-condition-config
                                         common-lisp:null)
                         :accessor %rule-condition-query-string-config
                         :initform common-lisp:nil)
                        (http-header-config :initarg :http-header-config :type
                         (common-lisp:or http-header-condition-config
                                         common-lisp:null)
                         :accessor %rule-condition-http-header-config :initform
                         common-lisp:nil)
                        (path-pattern-config :initarg :path-pattern-config
                         :type
                         (common-lisp:or path-pattern-condition-config
                                         common-lisp:null)
                         :accessor %rule-condition-path-pattern-config
                         :initform common-lisp:nil)
                        (host-header-config :initarg :host-header-config :type
                         (common-lisp:or host-header-condition-config
                                         common-lisp:null)
                         :accessor %rule-condition-host-header-config :initform
                         common-lisp:nil)
                        (values :initarg :values :type
                         (common-lisp:or list-of-string common-lisp:null)
                         :accessor %rule-condition-values :initform
                         common-lisp:nil)
                        (field :initarg :field :type
                         (common-lisp:or condition-field-name common-lisp:null)
                         :accessor %rule-condition-field :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'rule-condition 'make-rule-condition))
 (common-lisp:defun make-rule-condition
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-ip-config
                     http-request-method-config query-string-config
                     http-header-config path-pattern-config host-header-config
                     values field)
   (common-lisp:apply #'common-lisp:make-instance 'rule-condition
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rule-condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rule-condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field))
      (common-lisp:list
       (common-lisp:cons "Field"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-header-config))
      (common-lisp:list
       (common-lisp:cons "HostHeaderConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path-pattern-config))
      (common-lisp:list
       (common-lisp:cons "PathPatternConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-header-config))
      (common-lisp:list
       (common-lisp:cons "HttpHeaderConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string-config))
      (common-lisp:list
       (common-lisp:cons "QueryStringConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'http-request-method-config))
      (common-lisp:list
       (common-lisp:cons "HttpRequestMethodConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-ip-config))
      (common-lisp:list
       (common-lisp:cons "SourceIpConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rule-condition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rule-condition-list ()
   '(trivial-types:proper-list rule-condition))
 (common-lisp:defun |make-rule-condition-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rule-condition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition rule-not-found-exception
     (elbv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'rule-not-found-exception)))
(common-lisp:deftype rule-priority () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype rule-priority-list ()
   '(trivial-types:proper-list rule-priority-pair))
 (common-lisp:defun |make-rule-priority-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rule-priority-pair))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass rule-priority-pair common-lisp:nil
                       ((priority :initarg :priority :type
                         (common-lisp:or rule-priority common-lisp:null)
                         :accessor %rule-priority-pair-priority :initform
                         common-lisp:nil)
                        (rule-arn :initarg :rule-arn :type
                         (common-lisp:or rule-arn common-lisp:null) :accessor
                         %rule-priority-pair-rule-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'rule-priority-pair 'make-rule-priority-pair))
 (common-lisp:defun make-rule-priority-pair
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key priority rule-arn)
   (common-lisp:apply #'common-lisp:make-instance 'rule-priority-pair
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rule-priority-pair))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rule-priority-pair))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-arn))
      (common-lisp:list
       (common-lisp:cons "RuleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rule-priority-pair))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rules () '(trivial-types:proper-list rule))
 (common-lisp:defun |make-rules|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition sslpolicy-not-found-exception
     (elbv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'sslpolicy-not-found-exception)))
(common-lisp:deftype security-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype security-groups ()
   '(trivial-types:proper-list security-group-id))
 (common-lisp:defun |make-security-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass set-ip-address-type-input common-lisp:nil
                       ((ip-address-type :initarg :ip-address-type :type
                         (common-lisp:or ip-address-type common-lisp:null)
                         :accessor %set-ip-address-type-input-ip-address-type
                         :initform
                         (common-lisp:error ":ip-address-type is required"))
                        (load-balancer-arn :initarg :load-balancer-arn :type
                         (common-lisp:or load-balancer-arn common-lisp:null)
                         :accessor %set-ip-address-type-input-load-balancer-arn
                         :initform
                         (common-lisp:error
                          ":load-balancer-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'set-ip-address-type-input
                    'make-set-ip-address-type-input))
 (common-lisp:defun make-set-ip-address-type-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ip-address-type load-balancer-arn)
   (common-lisp:apply #'common-lisp:make-instance 'set-ip-address-type-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-ip-address-type-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-ip-address-type-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-arn))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "IpAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-ip-address-type-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-ip-address-type-output common-lisp:nil
                       ((ip-address-type :initarg :ip-address-type :type
                         (common-lisp:or ip-address-type common-lisp:null)
                         :accessor %set-ip-address-type-output-ip-address-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'set-ip-address-type-output
                    'make-set-ip-address-type-output))
 (common-lisp:defun make-set-ip-address-type-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ip-address-type)
   (common-lisp:apply #'common-lisp:make-instance 'set-ip-address-type-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-ip-address-type-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-ip-address-type-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "IpAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-ip-address-type-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-rule-priorities-input common-lisp:nil
                       ((rule-priorities :initarg :rule-priorities :type
                         (common-lisp:or rule-priority-list common-lisp:null)
                         :accessor %set-rule-priorities-input-rule-priorities
                         :initform
                         (common-lisp:error ":rule-priorities is required"))))
 (common-lisp:export
  (common-lisp:list 'set-rule-priorities-input
                    'make-set-rule-priorities-input))
 (common-lisp:defun make-set-rule-priorities-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rule-priorities)
   (common-lisp:apply #'common-lisp:make-instance 'set-rule-priorities-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-rule-priorities-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-rule-priorities-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-priorities))
      (common-lisp:list
       (common-lisp:cons "RulePriorities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-rule-priorities-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-rule-priorities-output common-lisp:nil
                       ((rules :initarg :rules :type
                         (common-lisp:or rules common-lisp:null) :accessor
                         %set-rule-priorities-output-rules :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'set-rule-priorities-output
                    'make-set-rule-priorities-output))
 (common-lisp:defun make-set-rule-priorities-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rules)
   (common-lisp:apply #'common-lisp:make-instance 'set-rule-priorities-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-rule-priorities-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-rule-priorities-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-rule-priorities-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-security-groups-input common-lisp:nil
                       ((security-groups :initarg :security-groups :type
                         (common-lisp:or security-groups common-lisp:null)
                         :accessor %set-security-groups-input-security-groups
                         :initform
                         (common-lisp:error ":security-groups is required"))
                        (load-balancer-arn :initarg :load-balancer-arn :type
                         (common-lisp:or load-balancer-arn common-lisp:null)
                         :accessor %set-security-groups-input-load-balancer-arn
                         :initform
                         (common-lisp:error
                          ":load-balancer-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'set-security-groups-input
                    'make-set-security-groups-input))
 (common-lisp:defun make-set-security-groups-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key security-groups load-balancer-arn)
   (common-lisp:apply #'common-lisp:make-instance 'set-security-groups-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-security-groups-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-security-groups-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-arn))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-security-groups-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-security-groups-output common-lisp:nil
                       ((security-group-ids :initarg :security-group-ids :type
                         (common-lisp:or security-groups common-lisp:null)
                         :accessor
                         %set-security-groups-output-security-group-ids
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'set-security-groups-output
                    'make-set-security-groups-output))
 (common-lisp:defun make-set-security-groups-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key security-group-ids)
   (common-lisp:apply #'common-lisp:make-instance 'set-security-groups-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-security-groups-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-security-groups-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-security-groups-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-subnets-input common-lisp:nil
                       ((ip-address-type :initarg :ip-address-type :type
                         (common-lisp:or ip-address-type common-lisp:null)
                         :accessor %set-subnets-input-ip-address-type :initform
                         common-lisp:nil)
                        (subnet-mappings :initarg :subnet-mappings :type
                         (common-lisp:or subnet-mappings common-lisp:null)
                         :accessor %set-subnets-input-subnet-mappings :initform
                         common-lisp:nil)
                        (subnets :initarg :subnets :type
                         (common-lisp:or subnets common-lisp:null) :accessor
                         %set-subnets-input-subnets :initform common-lisp:nil)
                        (load-balancer-arn :initarg :load-balancer-arn :type
                         (common-lisp:or load-balancer-arn common-lisp:null)
                         :accessor %set-subnets-input-load-balancer-arn
                         :initform
                         (common-lisp:error
                          ":load-balancer-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'set-subnets-input 'make-set-subnets-input))
 (common-lisp:defun make-set-subnets-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ip-address-type subnet-mappings subnets
                     load-balancer-arn)
   (common-lisp:apply #'common-lisp:make-instance 'set-subnets-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input set-subnets-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input set-subnets-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-arn))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-mappings))
      (common-lisp:list
       (common-lisp:cons "SubnetMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "IpAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input set-subnets-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-subnets-output common-lisp:nil
                       ((ip-address-type :initarg :ip-address-type :type
                         (common-lisp:or ip-address-type common-lisp:null)
                         :accessor %set-subnets-output-ip-address-type
                         :initform common-lisp:nil)
                        (availability-zones :initarg :availability-zones :type
                         (common-lisp:or availability-zones common-lisp:null)
                         :accessor %set-subnets-output-availability-zones
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'set-subnets-output 'make-set-subnets-output))
 (common-lisp:defun make-set-subnets-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ip-address-type availability-zones)
   (common-lisp:apply #'common-lisp:make-instance 'set-subnets-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input set-subnets-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input set-subnets-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "IpAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input set-subnets-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass source-ip-condition-config common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or list-of-string common-lisp:null)
                         :accessor %source-ip-condition-config-values :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'source-ip-condition-config
                    'make-source-ip-condition-config))
 (common-lisp:defun make-source-ip-condition-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values)
   (common-lisp:apply #'common-lisp:make-instance 'source-ip-condition-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          source-ip-condition-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          source-ip-condition-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          source-ip-condition-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ssl-policies () '(trivial-types:proper-list ssl-policy))
 (common-lisp:defun |make-ssl-policies|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ssl-policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass ssl-policy common-lisp:nil
                       ((supported-load-balancer-types :initarg
                         :supported-load-balancer-types :type
                         (common-lisp:or list-of-string common-lisp:null)
                         :accessor %ssl-policy-supported-load-balancer-types
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or ssl-policy-name common-lisp:null)
                         :accessor %ssl-policy-name :initform common-lisp:nil)
                        (ciphers :initarg :ciphers :type
                         (common-lisp:or ciphers common-lisp:null) :accessor
                         %ssl-policy-ciphers :initform common-lisp:nil)
                        (ssl-protocols :initarg :ssl-protocols :type
                         (common-lisp:or ssl-protocols common-lisp:null)
                         :accessor %ssl-policy-ssl-protocols :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'ssl-policy 'make-ssl-policy))
 (common-lisp:defun make-ssl-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key supported-load-balancer-types name
                     ciphers ssl-protocols)
   (common-lisp:apply #'common-lisp:make-instance 'ssl-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ssl-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ssl-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssl-protocols))
      (common-lisp:list
       (common-lisp:cons "SslProtocols"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ciphers))
      (common-lisp:list
       (common-lisp:cons "Ciphers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-load-balancer-types))
      (common-lisp:list
       (common-lisp:cons "SupportedLoadBalancerTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ssl-policy))
   common-lisp:nil))
(common-lisp:deftype ssl-policy-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ssl-policy-names ()
   '(trivial-types:proper-list ssl-policy-name))
 (common-lisp:defun |make-ssl-policy-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ssl-policy-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ssl-protocol () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ssl-protocols ()
   '(trivial-types:proper-list ssl-protocol))
 (common-lisp:defun |make-ssl-protocols|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ssl-protocol))
   aws-sdk/generator/shape::members))
(common-lisp:deftype state-reason () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype string-value () 'common-lisp:string)
(common-lisp:deftype subnet-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass subnet-mapping common-lisp:nil
                       ((ipv6address :initarg :ipv6address :type
                         (common-lisp:or ipv6address common-lisp:null)
                         :accessor %subnet-mapping-ipv6address :initform
                         common-lisp:nil)
                        (private-ipv4address :initarg :private-ipv4address
                         :type
                         (common-lisp:or private-ipv4address common-lisp:null)
                         :accessor %subnet-mapping-private-ipv4address
                         :initform common-lisp:nil)
                        (allocation-id :initarg :allocation-id :type
                         (common-lisp:or allocation-id common-lisp:null)
                         :accessor %subnet-mapping-allocation-id :initform
                         common-lisp:nil)
                        (subnet-id :initarg :subnet-id :type
                         (common-lisp:or subnet-id common-lisp:null) :accessor
                         %subnet-mapping-subnet-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'subnet-mapping 'make-subnet-mapping))
 (common-lisp:defun make-subnet-mapping
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ipv6address private-ipv4address
                     allocation-id subnet-id)
   (common-lisp:apply #'common-lisp:make-instance 'subnet-mapping
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subnet-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subnet-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocation-id))
      (common-lisp:list
       (common-lisp:cons "AllocationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-ipv4address))
      (common-lisp:list
       (common-lisp:cons "PrivateIPv4Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6address))
      (common-lisp:list
       (common-lisp:cons "IPv6Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subnet-mapping))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype subnet-mappings ()
   '(trivial-types:proper-list subnet-mapping))
 (common-lisp:defun |make-subnet-mappings|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet-mapping))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition subnet-not-found-exception
     (elbv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subnet-not-found-exception)))
(common-lisp:progn
 (common-lisp:deftype subnets () '(trivial-types:proper-list subnet-id))
 (common-lisp:defun |make-subnets|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         %tag-value :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         %tag-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-description common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %tag-description-tags :initform common-lisp:nil)
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %tag-description-resource-arn :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'tag-description 'make-tag-description))
 (common-lisp:defun make-tag-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-descriptions ()
   '(trivial-types:proper-list tag-description))
 (common-lisp:defun |make-tag-descriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-description))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-keys () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-keys|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass target-description common-lisp:nil
                       ((availability-zone :initarg :availability-zone :type
                         (common-lisp:or zone-name common-lisp:null) :accessor
                         %target-description-availability-zone :initform
                         common-lisp:nil)
                        (port :initarg :port :type
                         (common-lisp:or port common-lisp:null) :accessor
                         %target-description-port :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or target-id common-lisp:null) :accessor
                         %target-description-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'target-description 'make-target-description))
 (common-lisp:defun make-target-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key availability-zone port id)
   (common-lisp:apply #'common-lisp:make-instance 'target-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input target-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input target-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input target-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype target-descriptions ()
   '(trivial-types:proper-list target-description))
 (common-lisp:defun |make-target-descriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list target-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass target-group common-lisp:nil
                       ((ip-address-type :initarg :ip-address-type :type
                         (common-lisp:or target-group-ip-address-type-enum
                                         common-lisp:null)
                         :accessor %target-group-ip-address-type :initform
                         common-lisp:nil)
                        (protocol-version :initarg :protocol-version :type
                         (common-lisp:or protocol-version common-lisp:null)
                         :accessor %target-group-protocol-version :initform
                         common-lisp:nil)
                        (target-type :initarg :target-type :type
                         (common-lisp:or target-type-enum common-lisp:null)
                         :accessor %target-group-target-type :initform
                         common-lisp:nil)
                        (load-balancer-arns :initarg :load-balancer-arns :type
                         (common-lisp:or load-balancer-arns common-lisp:null)
                         :accessor %target-group-load-balancer-arns :initform
                         common-lisp:nil)
                        (matcher :initarg :matcher :type
                         (common-lisp:or matcher common-lisp:null) :accessor
                         %target-group-matcher :initform common-lisp:nil)
                        (health-check-path :initarg :health-check-path :type
                         (common-lisp:or path common-lisp:null) :accessor
                         %target-group-health-check-path :initform
                         common-lisp:nil)
                        (unhealthy-threshold-count :initarg
                         :unhealthy-threshold-count :type
                         (common-lisp:or health-check-threshold-count
                                         common-lisp:null)
                         :accessor %target-group-unhealthy-threshold-count
                         :initform common-lisp:nil)
                        (healthy-threshold-count :initarg
                         :healthy-threshold-count :type
                         (common-lisp:or health-check-threshold-count
                                         common-lisp:null)
                         :accessor %target-group-healthy-threshold-count
                         :initform common-lisp:nil)
                        (health-check-timeout-seconds :initarg
                         :health-check-timeout-seconds :type
                         (common-lisp:or health-check-timeout-seconds
                                         common-lisp:null)
                         :accessor %target-group-health-check-timeout-seconds
                         :initform common-lisp:nil)
                        (health-check-interval-seconds :initarg
                         :health-check-interval-seconds :type
                         (common-lisp:or health-check-interval-seconds
                                         common-lisp:null)
                         :accessor %target-group-health-check-interval-seconds
                         :initform common-lisp:nil)
                        (health-check-enabled :initarg :health-check-enabled
                         :type
                         (common-lisp:or health-check-enabled common-lisp:null)
                         :accessor %target-group-health-check-enabled :initform
                         common-lisp:nil)
                        (health-check-port :initarg :health-check-port :type
                         (common-lisp:or health-check-port common-lisp:null)
                         :accessor %target-group-health-check-port :initform
                         common-lisp:nil)
                        (health-check-protocol :initarg :health-check-protocol
                         :type (common-lisp:or protocol-enum common-lisp:null)
                         :accessor %target-group-health-check-protocol
                         :initform common-lisp:nil)
                        (vpc-id :initarg :vpc-id :type
                         (common-lisp:or vpc-id common-lisp:null) :accessor
                         %target-group-vpc-id :initform common-lisp:nil)
                        (port :initarg :port :type
                         (common-lisp:or port common-lisp:null) :accessor
                         %target-group-port :initform common-lisp:nil)
                        (protocol :initarg :protocol :type
                         (common-lisp:or protocol-enum common-lisp:null)
                         :accessor %target-group-protocol :initform
                         common-lisp:nil)
                        (target-group-name :initarg :target-group-name :type
                         (common-lisp:or target-group-name common-lisp:null)
                         :accessor %target-group-target-group-name :initform
                         common-lisp:nil)
                        (target-group-arn :initarg :target-group-arn :type
                         (common-lisp:or target-group-arn common-lisp:null)
                         :accessor %target-group-target-group-arn :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'target-group 'make-target-group))
 (common-lisp:defun make-target-group
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ip-address-type protocol-version
                     target-type load-balancer-arns matcher health-check-path
                     unhealthy-threshold-count healthy-threshold-count
                     health-check-timeout-seconds health-check-interval-seconds
                     health-check-enabled health-check-port
                     health-check-protocol vpc-id port protocol
                     target-group-name target-group-arn)
   (common-lisp:apply #'common-lisp:make-instance 'target-group
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input target-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input target-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-arn))
      (common-lisp:list
       (common-lisp:cons "TargetGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-name))
      (common-lisp:list
       (common-lisp:cons "TargetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-protocol))
      (common-lisp:list
       (common-lisp:cons "HealthCheckProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check-port))
      (common-lisp:list
       (common-lisp:cons "HealthCheckPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-enabled))
      (common-lisp:list
       (common-lisp:cons "HealthCheckEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-interval-seconds))
      (common-lisp:list
       (common-lisp:cons "HealthCheckIntervalSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-timeout-seconds))
      (common-lisp:list
       (common-lisp:cons "HealthCheckTimeoutSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'healthy-threshold-count))
      (common-lisp:list
       (common-lisp:cons "HealthyThresholdCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unhealthy-threshold-count))
      (common-lisp:list
       (common-lisp:cons "UnhealthyThresholdCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check-path))
      (common-lisp:list
       (common-lisp:cons "HealthCheckPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'matcher))
      (common-lisp:list
       (common-lisp:cons "Matcher"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-arns))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-type))
      (common-lisp:list
       (common-lisp:cons "TargetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol-version))
      (common-lisp:list
       (common-lisp:cons "ProtocolVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "IpAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input target-group))
   common-lisp:nil))
(common-lisp:deftype target-group-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype target-group-arns ()
   '(trivial-types:proper-list target-group-arn))
 (common-lisp:defun |make-target-group-arns|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list target-group-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition target-group-association-limit-exception
     (elbv2-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'target-group-association-limit-exception)))
(common-lisp:progn
 (common-lisp:defclass target-group-attribute common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or target-group-attribute-value
                                         common-lisp:null)
                         :accessor %target-group-attribute-value :initform
                         common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or target-group-attribute-key
                                         common-lisp:null)
                         :accessor %target-group-attribute-key :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'target-group-attribute 'make-target-group-attribute))
 (common-lisp:defun make-target-group-attribute
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'target-group-attribute
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          target-group-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          target-group-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          target-group-attribute))
   common-lisp:nil))
(common-lisp:deftype target-group-attribute-key () 'common-lisp:string)
(common-lisp:deftype target-group-attribute-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype target-group-attributes ()
   '(trivial-types:proper-list target-group-attribute))
 (common-lisp:defun |make-target-group-attributes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list target-group-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:deftype target-group-ip-address-type-enum () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype target-group-list ()
   '(trivial-types:proper-list target-group-tuple))
 (common-lisp:defun |make-target-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list target-group-tuple))
   aws-sdk/generator/shape::members))
(common-lisp:deftype target-group-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype target-group-names ()
   '(trivial-types:proper-list target-group-name))
 (common-lisp:defun |make-target-group-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list target-group-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition target-group-not-found-exception
     (elbv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'target-group-not-found-exception)))
(common-lisp:progn
 (common-lisp:defclass target-group-stickiness-config common-lisp:nil
                       ((duration-seconds :initarg :duration-seconds :type
                         (common-lisp:or
                          target-group-stickiness-duration-seconds
                          common-lisp:null)
                         :accessor
                         %target-group-stickiness-config-duration-seconds
                         :initform common-lisp:nil)
                        (enabled :initarg :enabled :type
                         (common-lisp:or target-group-stickiness-enabled
                                         common-lisp:null)
                         :accessor %target-group-stickiness-config-enabled
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'target-group-stickiness-config
                    'make-target-group-stickiness-config))
 (common-lisp:defun make-target-group-stickiness-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key duration-seconds enabled)
   (common-lisp:apply #'common-lisp:make-instance
                      'target-group-stickiness-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          target-group-stickiness-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          target-group-stickiness-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-seconds))
      (common-lisp:list
       (common-lisp:cons "DurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          target-group-stickiness-config))
   common-lisp:nil))
(common-lisp:deftype target-group-stickiness-duration-seconds ()
  'common-lisp:integer)
(common-lisp:deftype target-group-stickiness-enabled () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass target-group-tuple common-lisp:nil
                       ((weight :initarg :weight :type
                         (common-lisp:or target-group-weight common-lisp:null)
                         :accessor %target-group-tuple-weight :initform
                         common-lisp:nil)
                        (target-group-arn :initarg :target-group-arn :type
                         (common-lisp:or target-group-arn common-lisp:null)
                         :accessor %target-group-tuple-target-group-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'target-group-tuple 'make-target-group-tuple))
 (common-lisp:defun make-target-group-tuple
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key weight target-group-arn)
   (common-lisp:apply #'common-lisp:make-instance 'target-group-tuple
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input target-group-tuple))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input target-group-tuple))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-arn))
      (common-lisp:list
       (common-lisp:cons "TargetGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weight))
      (common-lisp:list
       (common-lisp:cons "Weight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input target-group-tuple))
   common-lisp:nil))
(common-lisp:deftype target-group-weight () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype target-groups ()
   '(trivial-types:proper-list target-group))
 (common-lisp:defun |make-target-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list target-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass target-health common-lisp:nil
                       ((description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %target-health-description :initform
                         common-lisp:nil)
                        (reason :initarg :reason :type
                         (common-lisp:or target-health-reason-enum
                                         common-lisp:null)
                         :accessor %target-health-reason :initform
                         common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or target-health-state-enum
                                         common-lisp:null)
                         :accessor %target-health-state :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'target-health 'make-target-health))
 (common-lisp:defun make-target-health
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description reason state)
   (common-lisp:apply #'common-lisp:make-instance 'target-health
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input target-health))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input target-health))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input target-health))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass target-health-description common-lisp:nil
                       ((target-health :initarg :target-health :type
                         (common-lisp:or target-health common-lisp:null)
                         :accessor %target-health-description-target-health
                         :initform common-lisp:nil)
                        (health-check-port :initarg :health-check-port :type
                         (common-lisp:or health-check-port common-lisp:null)
                         :accessor %target-health-description-health-check-port
                         :initform common-lisp:nil)
                        (target :initarg :target :type
                         (common-lisp:or target-description common-lisp:null)
                         :accessor %target-health-description-target :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'target-health-description
                    'make-target-health-description))
 (common-lisp:defun make-target-health-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-health health-check-port target)
   (common-lisp:apply #'common-lisp:make-instance 'target-health-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          target-health-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          target-health-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "Target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check-port))
      (common-lisp:list
       (common-lisp:cons "HealthCheckPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-health))
      (common-lisp:list
       (common-lisp:cons "TargetHealth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          target-health-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype target-health-descriptions ()
   '(trivial-types:proper-list target-health-description))
 (common-lisp:defun |make-target-health-descriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            target-health-description))
   aws-sdk/generator/shape::members))
(common-lisp:deftype target-health-reason-enum () 'common-lisp:string)
(common-lisp:deftype target-health-state-enum () 'common-lisp:string)
(common-lisp:deftype target-id () 'common-lisp:string)
(common-lisp:deftype target-type-enum () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-actions-exception
     (elbv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'too-many-actions-exception)))
(common-lisp:progn
 (common-lisp:define-condition too-many-certificates-exception
     (elbv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'too-many-certificates-exception)))
(common-lisp:progn
 (common-lisp:define-condition too-many-listeners-exception
     (elbv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'too-many-listeners-exception)))
(common-lisp:progn
 (common-lisp:define-condition too-many-load-balancers-exception
     (elbv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'too-many-load-balancers-exception)))
(common-lisp:progn
 (common-lisp:define-condition too-many-registrations-for-target-id-exception
     (elbv2-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'too-many-registrations-for-target-id-exception)))
(common-lisp:progn
 (common-lisp:define-condition too-many-rules-exception
     (elbv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'too-many-rules-exception)))
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-exception
     (elbv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'too-many-tags-exception)))
(common-lisp:progn
 (common-lisp:define-condition too-many-target-groups-exception
     (elbv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'too-many-target-groups-exception)))
(common-lisp:progn
 (common-lisp:define-condition too-many-targets-exception
     (elbv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'too-many-targets-exception)))
(common-lisp:progn
 (common-lisp:define-condition too-many-unique-target-groups-per-load-balancer-exception
     (elbv2-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list
   'too-many-unique-target-groups-per-load-balancer-exception)))
(common-lisp:progn
 (common-lisp:define-condition unsupported-protocol-exception
     (elbv2-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'unsupported-protocol-exception)))
(common-lisp:deftype vpc-id () 'common-lisp:string)
(common-lisp:deftype zone-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun add-listener-certificates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key listener-arn certificates)
   (common-lisp:declare (common-lisp:ignorable listener-arn certificates))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-listener-certificates-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elbv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "AddListenerCertificates"
                                                        "2015-12-01"))
      common-lisp:nil "AddListenerCertificatesResult" *error-map*)))
 (common-lisp:export 'add-listener-certificates))
(common-lisp:progn
 (common-lisp:defun add-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arns tags)
   (common-lisp:declare (common-lisp:ignorable resource-arns tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-tags-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elbv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "AddTags"
                                                        "2015-12-01"))
      common-lisp:nil "AddTagsResult" *error-map*)))
 (common-lisp:export 'add-tags))
(common-lisp:progn
 (common-lisp:defun create-listener
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-arn protocol port
                     ssl-policy certificates default-actions alpn-policy tags)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-arn protocol port ssl-policy
     certificates default-actions alpn-policy tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-listener-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elbv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "CreateListener"
                                                        "2015-12-01"))
      common-lisp:nil "CreateListenerResult" *error-map*)))
 (common-lisp:export 'create-listener))
(common-lisp:progn
 (common-lisp:defun create-load-balancer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name subnets subnet-mappings
                     security-groups scheme tags type ip-address-type
                     customer-owned-ipv4pool)
   (common-lisp:declare
    (common-lisp:ignorable name subnets subnet-mappings security-groups scheme
     tags type ip-address-type customer-owned-ipv4pool))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-load-balancer-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elbv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "CreateLoadBalancer"
                                                        "2015-12-01"))
      common-lisp:nil "CreateLoadBalancerResult" *error-map*)))
 (common-lisp:export 'create-load-balancer))
(common-lisp:progn
 (common-lisp:defun create-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key listener-arn conditions priority actions
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable listener-arn conditions priority actions tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-rule-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elbv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "CreateRule"
                                                        "2015-12-01"))
      common-lisp:nil "CreateRuleResult" *error-map*)))
 (common-lisp:export 'create-rule))
(common-lisp:progn
 (common-lisp:defun create-target-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name protocol protocol-version port
                     vpc-id health-check-protocol health-check-port
                     health-check-enabled health-check-path
                     health-check-interval-seconds health-check-timeout-seconds
                     healthy-threshold-count unhealthy-threshold-count matcher
                     target-type tags ip-address-type)
   (common-lisp:declare
    (common-lisp:ignorable name protocol protocol-version port vpc-id
     health-check-protocol health-check-port health-check-enabled
     health-check-path health-check-interval-seconds
     health-check-timeout-seconds healthy-threshold-count
     unhealthy-threshold-count matcher target-type tags ip-address-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-target-group-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elbv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "CreateTargetGroup"
                                                        "2015-12-01"))
      common-lisp:nil "CreateTargetGroupResult" *error-map*)))
 (common-lisp:export 'create-target-group))
(common-lisp:progn
 (common-lisp:defun delete-listener
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key listener-arn)
   (common-lisp:declare (common-lisp:ignorable listener-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-listener-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elbv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DeleteListener"
                                                        "2015-12-01"))
      common-lisp:nil "DeleteListenerResult" *error-map*)))
 (common-lisp:export 'delete-listener))
(common-lisp:progn
 (common-lisp:defun delete-load-balancer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-arn)
   (common-lisp:declare (common-lisp:ignorable load-balancer-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-load-balancer-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elbv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DeleteLoadBalancer"
                                                        "2015-12-01"))
      common-lisp:nil "DeleteLoadBalancerResult" *error-map*)))
 (common-lisp:export 'delete-load-balancer))
(common-lisp:progn
 (common-lisp:defun delete-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-arn)
   (common-lisp:declare (common-lisp:ignorable rule-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-rule-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elbv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DeleteRule"
                                                        "2015-12-01"))
      common-lisp:nil "DeleteRuleResult" *error-map*)))
 (common-lisp:export 'delete-rule))
(common-lisp:progn
 (common-lisp:defun delete-target-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key target-group-arn)
   (common-lisp:declare (common-lisp:ignorable target-group-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-target-group-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elbv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DeleteTargetGroup"
                                                        "2015-12-01"))
      common-lisp:nil "DeleteTargetGroupResult" *error-map*)))
 (common-lisp:export 'delete-target-group))
(common-lisp:progn
 (common-lisp:defun deregister-targets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key target-group-arn targets)
   (common-lisp:declare (common-lisp:ignorable target-group-arn targets))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-deregister-targets-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elbv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DeregisterTargets"
                                                        "2015-12-01"))
      common-lisp:nil "DeregisterTargetsResult" *error-map*)))
 (common-lisp:export 'deregister-targets))
(common-lisp:progn
 (common-lisp:defun describe-account-limits
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key marker page-size)
   (common-lisp:declare (common-lisp:ignorable marker page-size))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-account-limits-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elbv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeAccountLimits"
                                                        "2015-12-01"))
      common-lisp:nil "DescribeAccountLimitsResult" *error-map*)))
 (common-lisp:export 'describe-account-limits))
(common-lisp:progn
 (common-lisp:defun describe-listener-certificates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key listener-arn marker page-size)
   (common-lisp:declare (common-lisp:ignorable listener-arn marker page-size))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-listener-certificates-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elbv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeListenerCertificates"
                                                        "2015-12-01"))
      common-lisp:nil "DescribeListenerCertificatesResult" *error-map*)))
 (common-lisp:export 'describe-listener-certificates))
(common-lisp:progn
 (common-lisp:defun describe-listeners
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-arn listener-arns marker
                     page-size)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-arn listener-arns marker page-size))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-listeners-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elbv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeListeners"
                                                        "2015-12-01"))
      common-lisp:nil "DescribeListenersResult" *error-map*)))
 (common-lisp:export 'describe-listeners))
(common-lisp:progn
 (common-lisp:defun describe-load-balancer-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-arn)
   (common-lisp:declare (common-lisp:ignorable load-balancer-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-load-balancer-attributes-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elbv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeLoadBalancerAttributes"
                                                        "2015-12-01"))
      common-lisp:nil "DescribeLoadBalancerAttributesResult" *error-map*)))
 (common-lisp:export 'describe-load-balancer-attributes))
(common-lisp:progn
 (common-lisp:defun describe-load-balancers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-arns names marker
                     page-size)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-arns names marker page-size))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-load-balancers-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elbv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeLoadBalancers"
                                                        "2015-12-01"))
      common-lisp:nil "DescribeLoadBalancersResult" *error-map*)))
 (common-lisp:export 'describe-load-balancers))
(common-lisp:progn
 (common-lisp:defun describe-rules
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key listener-arn rule-arns marker page-size)
   (common-lisp:declare
    (common-lisp:ignorable listener-arn rule-arns marker page-size))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-rules-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elbv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeRules"
                                                        "2015-12-01"))
      common-lisp:nil "DescribeRulesResult" *error-map*)))
 (common-lisp:export 'describe-rules))
(common-lisp:progn
 (common-lisp:defun describe-sslpolicies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key names marker page-size
                     load-balancer-type)
   (common-lisp:declare
    (common-lisp:ignorable names marker page-size load-balancer-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-sslpolicies-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elbv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeSSLPolicies"
                                                        "2015-12-01"))
      common-lisp:nil "DescribeSSLPoliciesResult" *error-map*)))
 (common-lisp:export 'describe-sslpolicies))
(common-lisp:progn
 (common-lisp:defun describe-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arns)
   (common-lisp:declare (common-lisp:ignorable resource-arns))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-tags-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elbv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeTags"
                                                        "2015-12-01"))
      common-lisp:nil "DescribeTagsResult" *error-map*)))
 (common-lisp:export 'describe-tags))
(common-lisp:progn
 (common-lisp:defun describe-target-group-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key target-group-arn)
   (common-lisp:declare (common-lisp:ignorable target-group-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-target-group-attributes-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elbv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeTargetGroupAttributes"
                                                        "2015-12-01"))
      common-lisp:nil "DescribeTargetGroupAttributesResult" *error-map*)))
 (common-lisp:export 'describe-target-group-attributes))
(common-lisp:progn
 (common-lisp:defun describe-target-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-arn target-group-arns names
                     marker page-size)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-arn target-group-arns names marker
     page-size))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-target-groups-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elbv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeTargetGroups"
                                                        "2015-12-01"))
      common-lisp:nil "DescribeTargetGroupsResult" *error-map*)))
 (common-lisp:export 'describe-target-groups))
(common-lisp:progn
 (common-lisp:defun describe-target-health
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key target-group-arn targets)
   (common-lisp:declare (common-lisp:ignorable target-group-arn targets))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-target-health-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elbv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeTargetHealth"
                                                        "2015-12-01"))
      common-lisp:nil "DescribeTargetHealthResult" *error-map*)))
 (common-lisp:export 'describe-target-health))
(common-lisp:progn
 (common-lisp:defun modify-listener
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key listener-arn port protocol ssl-policy
                     certificates default-actions alpn-policy)
   (common-lisp:declare
    (common-lisp:ignorable listener-arn port protocol ssl-policy certificates
     default-actions alpn-policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-listener-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elbv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ModifyListener"
                                                        "2015-12-01"))
      common-lisp:nil "ModifyListenerResult" *error-map*)))
 (common-lisp:export 'modify-listener))
(common-lisp:progn
 (common-lisp:defun modify-load-balancer-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-arn attributes)
   (common-lisp:declare (common-lisp:ignorable load-balancer-arn attributes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-load-balancer-attributes-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elbv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ModifyLoadBalancerAttributes"
                                                        "2015-12-01"))
      common-lisp:nil "ModifyLoadBalancerAttributesResult" *error-map*)))
 (common-lisp:export 'modify-load-balancer-attributes))
(common-lisp:progn
 (common-lisp:defun modify-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-arn conditions actions)
   (common-lisp:declare (common-lisp:ignorable rule-arn conditions actions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-rule-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elbv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ModifyRule"
                                                        "2015-12-01"))
      common-lisp:nil "ModifyRuleResult" *error-map*)))
 (common-lisp:export 'modify-rule))
(common-lisp:progn
 (common-lisp:defun modify-target-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key target-group-arn health-check-protocol
                     health-check-port health-check-path health-check-enabled
                     health-check-interval-seconds health-check-timeout-seconds
                     healthy-threshold-count unhealthy-threshold-count matcher)
   (common-lisp:declare
    (common-lisp:ignorable target-group-arn health-check-protocol
     health-check-port health-check-path health-check-enabled
     health-check-interval-seconds health-check-timeout-seconds
     healthy-threshold-count unhealthy-threshold-count matcher))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-target-group-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elbv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ModifyTargetGroup"
                                                        "2015-12-01"))
      common-lisp:nil "ModifyTargetGroupResult" *error-map*)))
 (common-lisp:export 'modify-target-group))
(common-lisp:progn
 (common-lisp:defun modify-target-group-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key target-group-arn attributes)
   (common-lisp:declare (common-lisp:ignorable target-group-arn attributes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-target-group-attributes-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elbv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ModifyTargetGroupAttributes"
                                                        "2015-12-01"))
      common-lisp:nil "ModifyTargetGroupAttributesResult" *error-map*)))
 (common-lisp:export 'modify-target-group-attributes))
(common-lisp:progn
 (common-lisp:defun register-targets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key target-group-arn targets)
   (common-lisp:declare (common-lisp:ignorable target-group-arn targets))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-targets-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elbv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "RegisterTargets"
                                                        "2015-12-01"))
      common-lisp:nil "RegisterTargetsResult" *error-map*)))
 (common-lisp:export 'register-targets))
(common-lisp:progn
 (common-lisp:defun remove-listener-certificates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key listener-arn certificates)
   (common-lisp:declare (common-lisp:ignorable listener-arn certificates))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-listener-certificates-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elbv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "RemoveListenerCertificates"
                                                        "2015-12-01"))
      common-lisp:nil "RemoveListenerCertificatesResult" *error-map*)))
 (common-lisp:export 'remove-listener-certificates))
(common-lisp:progn
 (common-lisp:defun remove-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arns tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arns tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-remove-tags-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elbv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "RemoveTags"
                                                        "2015-12-01"))
      common-lisp:nil "RemoveTagsResult" *error-map*)))
 (common-lisp:export 'remove-tags))
(common-lisp:progn
 (common-lisp:defun set-ip-address-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-arn ip-address-type)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-arn ip-address-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-ip-address-type-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elbv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "SetIpAddressType"
                                                        "2015-12-01"))
      common-lisp:nil "SetIpAddressTypeResult" *error-map*)))
 (common-lisp:export 'set-ip-address-type))
(common-lisp:progn
 (common-lisp:defun set-rule-priorities
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-priorities)
   (common-lisp:declare (common-lisp:ignorable rule-priorities))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-rule-priorities-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elbv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "SetRulePriorities"
                                                        "2015-12-01"))
      common-lisp:nil "SetRulePrioritiesResult" *error-map*)))
 (common-lisp:export 'set-rule-priorities))
(common-lisp:progn
 (common-lisp:defun set-security-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-arn security-groups)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-arn security-groups))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-security-groups-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elbv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "SetSecurityGroups"
                                                        "2015-12-01"))
      common-lisp:nil "SetSecurityGroupsResult" *error-map*)))
 (common-lisp:export 'set-security-groups))
(common-lisp:progn
 (common-lisp:defun set-subnets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-arn subnets subnet-mappings
                     ip-address-type)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-arn subnets subnet-mappings
     ip-address-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-subnets-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'elbv2-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "SetSubnets"
                                                        "2015-12-01"))
      common-lisp:nil "SetSubnetsResult" *error-map*)))
 (common-lisp:export 'set-subnets))
